{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"current",
				"currentSub"
			],
			[
				"curren",
				"currentSub"
			],
			[
				"text",
				"text-decoration"
			],
			[
				"rpSearch",
				"rpSearchUtilService"
			],
			[
				"progress",
				"progressLoading"
			],
			[
				"deregister",
				"deregisterSearchTabChange"
			],
			[
				"dere",
				"deregisterSearchFilterButtonVisibility"
			],
			[
				"rpUser",
				"rpUserFilterButtonUtilServoce"
			],
			[
				"md-defualt",
				"md-default-accent"
			],
			[
				"style",
				"stylesheet"
			],
			[
				"normal",
				"normal-text-color"
			],
			[
				"ng-",
				"ng-if"
			],
			[
				"rp-ba",
				"rp-background-card"
			],
			[
				"rp-back",
				"rp-background-content"
			],
			[
				"material",
				"material-red-400"
			],
			[
				"string",
				"stringify"
			],
			[
				"refresh",
				"refreshToken"
			],
			[
				"sub",
				"substring"
			],
			[
				"titleC",
				"titleChangeService"
			],
			[
				"root",
				"rootScope"
			],
			[
				"Too",
				"toolbarTitle"
			],
			[
				"over",
				"overflow-y"
			],
			[
				"layout",
				"layout-fill"
			],
			[
				"toggle",
				"toggleLeft"
			],
			[
				"ng",
				"ng-controller"
			],
			[
				"less",
				"less-middleware"
			],
			[
				"cat",
				"cat_tags"
			],
			[
				"padding",
				"padding-left"
			],
			[
				"background",
				"background-color"
			],
			[
				"end",
				"endforeach"
			],
			[
				"paretn",
				"parentid"
			],
			[
				"servicere",
				"servicerequest_item"
			],
			[
				"csv",
				"csv_results"
			],
			[
				"tenant",
				"tenant_id"
			],
			[
				"tenan",
				"tenant_id"
			],
			[
				"list_show_comp",
				"list_show_companyprofile_languge"
			],
			[
				"item",
				"item_lang"
			],
			[
				"subcate",
				"subcategory_choice"
			],
			[
				"subcategory",
				"subcategory_chcoice"
			],
			[
				"TP",
				"TPL_EXTRAFIELDS_COMPANYPROFILE_APPROVAL"
			],
			[
				"font-",
				"font-weight"
			],
			[
				"cu",
				"current_user"
			],
			[
				"staff",
				"staff_emails"
			],
			[
				"service",
				"servicerequests_group_userids"
			],
			[
				"send",
				"sendEmail"
			],
			[
				"new_a",
				"new_article"
			],
			[
				"new",
				"new_article"
			],
			[
				"getD",
				"getDbo"
			],
			[
				"json",
				"json_encode"
			],
			[
				"raise",
				"raiseError"
			],
			[
				"tena",
				"tenant_email"
			],
			[
				"recipe",
				"recipient"
			],
			[
				"paid",
				"paid_status"
			],
			[
				"attribs",
				"attribs"
			],
			[
				"reci",
				"recipient"
			],
			[
				"billing_tenant",
				"billing_tenant_id"
			],
			[
				"attrib",
				"attrib_array"
			],
			[
				"parent",
				"parentid"
			],
			[
				"var",
				"var_dump"
			],
			[
				"paren",
				"parentid"
			],
			[
				"hide",
				"hideTenantModules"
			],
			[
				"ar",
				"ar_sub"
			],
			[
				"for",
				"foreach	foreach …"
			],
			[
				"str_re",
				"str_replace"
			],
			[
				"back",
				"background-color"
			],
			[
				"mar",
				"margin"
			],
			[
				"no",
				"nowrap"
			],
			[
				"margin",
				"margin-bottom"
			],
			[
				"title",
				"title_input"
			],
			[
				"else",
				"elseif	elseif …"
			],
			[
				"lota",
				"lota_1"
			],
			[
				"font",
				"font-size"
			],
			[
				"map",
				"map-assets"
			],
			[
				"inlin",
				"inline-block"
			],
			[
				"page",
				"page_title"
			],
			[
				"total",
				"total_page"
			],
			[
				"paddin",
				"padding"
			],
			[
				"in",
				"inline-block"
			],
			[
				"marg",
				"margin-left"
			],
			[
				"fo",
				"font-style"
			],
			[
				"quote",
				"quoteName"
			],
			[
				"company",
				"company_names"
			],
			[
				"csv_arry",
				"csv_array_str"
			],
			[
				"get",
				"getcwd"
			],
			[
				"size",
				"sizeoflines"
			],
			[
				"ul",
				"upload_location"
			],
			[
				"upload",
				"upload_location"
			],
			[
				"res",
				"results"
			],
			[
				"table",
				"table-cell"
			],
			[
				"v",
				"vertical-align"
			],
			[
				"print",
				"print_r"
			],
			[
				"limi",
				"limitstart"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "// 'use strict';\n\nvar rpSearchControllers = angular.module('rpSearchControllers', []);\n\nrpSearchControllers.controller('rpSearchFormCtrl', ['$scope', '$rootScope', '$location', '$routeParams', 'rpSearchUtilService', 'rpSubredditsUtilService',\n	'rpLocationUtilService',\n	function ($scope, $rootScope, $location, $routeParams, rpSearchUtilService, rpSubredditsUtilService, rpLocationUtilService) {\n		console.log('[rpSearchFormCtrl] loaded.');\n\n		$scope.params = rpSearchUtilService.params;\n		// console.log('[rpSearchFormCtrl] rpSearchUtilService.params.formType: ' + rpSearchUtilService.params.formType);\n		// $scope.params.formType = rpSearchUtilService.params.formType;\n		// $scope.params.formType = $scope.params.type;\n\n		//Set the current sub if we open the search form on a page other than frontpage, all or search page.\n		if ($scope.params.sub === 'all' && rpSubredditsUtilService.currentSub !== '') {\n			console.log('[rpSearchFormCtrl] rpSubredditsUtilService.currentSub: ' + rpSubredditsUtilService.currentSub);\n			$scope.params.sub = rpSubredditsUtilService.currentSub;\n		}\n\n		console.log('[rpSearchFormCtrl] $scope.params.sub: ' + $scope.params.sub);\n		if ($scope.params.sub !== 'all') {\n			console.log('[rpSearchFormCtrl] $scope.params.sub != all');\n			$scope.params.type = $scope.params.formType = \"link\";\n			\n		} \n		console.log('[rpSearchFormCtrl] $scope.params.type: ' + $scope.params.type + \", $scope.params.formType: \" + $scope.params.formType);\n\n\n		var searchPathRe = /\\/search.*/;\n		var onSearchPage = searchPathRe.test($location.path());\n		console.log('[rpSearchFormCtrl] $onSearchPage: ' + onSearchPage);\n		console.log('[rpSearchFormCtrl] $scope.params: ' + JSON.stringify($scope.params));\n\n		//focus search input.\n		$scope.focusInput = true;\n\n		//sub autocomplete\n		$scope.subs = rpSubredditsUtilService.subs;\n\n		$scope.subSearch = function(subSearchText) {\n			$scope.params.sub = subSearchText;\n			var results = subSearchText ? $scope.subs.filter(createFilterFor(subSearchText)) : [];\n			return results;\n		};\n\n		function createFilterFor(query) {\n			var lowercaseQuery = angular.lowercase(query);\n			return function filterFn(sub) {\n				return (sub.data.display_name.indexOf(lowercaseQuery) === 0);\n			};\n		}\n\n		$scope.onSearchTextChange = function () {\n			\n		}\n\n		var deregisterSearchParamsChanged = $rootScope.$on('search_params_changed', function() {\n			$scope.params = rpSearchUtilService.params;\n		});\n\n		$scope.submitSearchForm = function() {\n			onSearchPage = searchPathRe.test($location.path());\n			console.log('[rpSearchFormCtrl] submitSearchForm, onSearchPage: ' + onSearchPage);\n			console.log('[rpSearchFormCtrl] submitSearchForm, $scope.params.formType: ' + $scope.params.formType);\n\n			if ($scope.params.formType)\n				$scope.params.type = $scope.params.formType;\n\n			console.log('[rpSearchFormCtrl] submitSearchForm, $scope.params: ' + JSON.stringify($scope.params));\n\n			if ($scope.subSelectedItem) {\n				$scope.params.sub = $scope.subSelectedItem.data.display_name;\n				console.log('[rpSearchFormCtrl] submitSearchForm, $scope.subSelectedItem: ' + $scope.subSelectedItem.data.display_name);\n			} else if ($scope.params.sub === '') {\n				$scope.params.sub = rpSubredditsUtilService.currentSub;\n			}\n\n			if ($scope.params.type !== 'link')\n				$scope.params.sub = 'all';\n\n			if (!$scope.params.sub || $scope.params.sub === \"\")\n				$scope.params.sub = 'all';\n\n			if ($scope.params.sub === 'all')\n				$scope.params.restrict_sr = false;\n			else \n				$scope.params.restrict_sr = true;\n\n			console.log('[rpSearchFormCtrl] submitSearchForm, $scope.params.formType: ' + $scope.params.formType);\n			\n			\n			console.log('[rpSearchFormCtrl] submitSearchForm, $scope.params: ' + JSON.stringify($scope.params));\n\n			rpLocationUtilService(null, '/search', \n				'q='+ $scope.params.q +\n				'&sub=' + $scope.params.sub + \n				'&type=' + $scope.params.type +\n				'&restrict_sr=' + $scope.params.restrict_sr +\n				'&sort=' + $scope.params.sort +\n				'&after=' + $scope.params.after +\n				'&t=' + $scope.params.t, !onSearchPage, false);\n\n			if (onSearchPage) {\n				$rootScope.$emit('search_form_submitted');\n			}\n\n		};\n\n		$scope.resetSearchForm = function() {\n\n		};\n\n		$scope.$on('$destroy', function() {\n			deregisterSearchParamsChanged();\n		});\n\n	}\n]);\n\nrpSearchControllers.controller('rpSearchCtrl', [\n		'$scope', \n		'$rootScope', \n		'$routeParams', \n		'$location',\n		'$window', \n		'$mdDialog',\n		'$mdBottomSheet',\n		'rpSubredditsUtilService', \n		'rpSearchUtilService', \n		'rpSearchFormUtilService',\n		'rpSearchTabsUtilService', \n		'rpUserFilterButtonUtilService', \n		'rpUserSortButtonUtilService', \n		'rpPostFilterButtonUtilService', \n		'rpSubscribeButtonUtilService', \n		'rpSearchFilterButtonUtilService',\n		'rpSaveUtilService',\n		'rpUpvoteUtilService',\n		'rpDownvoteUtilService',\n		'rpByIdUtilService',\n		'rpLocationUtilService',\n		'rpSettingsUtilService',\n		'rpToolbarShadowUtilService',\n		'rpTitleChangeService',\n\n	\n	function (\n		$scope, \n		$rootScope, \n		$routeParams, \n		$location,\n		$window, \n		$mdDialog,\n		$mdBottomSheet,\n		rpSubredditsUtilService, \n		rpSearchUtilService, \n		rpSearchFormUtilService, \n		rpSearchTabsUtilService, \n		rpUserFilterButtonUtilService, \n		rpUserSortButtonUtilService,\n		rpPostFilterButtonUtilService, \n		rpSubscribeButtonUtilService, \n		rpSearchFilterButtonUtilService,\n		rpSaveUtilService,\n		rpUpvoteUtilService,\n		rpDownvoteUtilService,\n		rpByIdUtilService,\n		rpLocationUtilService,\n		rpSettingsUtilService,\n		rpToolbarShadowUtilService,\n		rpTitleChangeService\n\n\n	) {\n\n\n		console.log('[rpSearchCtrl] loaded, $scope.$id: ' + $scope.$id);\n		/*\n			UI Updates\n		 */\n\n		var value = $window.innerWidth;\n		if (value > 1550) $scope.columns = [1, 2, 3];\n		else if (value > 970) $scope.columns = [1, 2];\n		else $scope.columns = [1];\n\n		rpUserFilterButtonUtilService.hide();\n		rpUserSortButtonUtilService.hide();\n		rpPostFilterButtonUtilService.hide();\n		rpSubscribeButtonUtilService.hide();\n		rpSearchFilterButtonUtilService.show();\n		\n		$scope.posts = {};\n		$scope.links = {};\n		$scope.subs = {};\n		$scope.haveSubs = $scope.haveLinks = $scope.havePosts = false;\n		var loadingMore = false;\n		$scope.nothingPosts = false;\n		$scope.nothingSubs = false;\n		$scope.nothingLinks = false;\n\n		$scope.commentsDialog = rpSettingsUtilService.settings.commentsDialog;\n\n		/*\n			Set search parameters.\n		 */\n		$scope.params = rpSearchUtilService.params;\n\n\n		if ($routeParams.q) {\n			$scope.params.q = $routeParams.q;\n			rpTitleChangeService.prepTitleChange('search: ' + $scope.params.q);\n\n		}\n\n		// $scope.params.sub = $routeParams.sub || rpSubredditsUtilService.currentSub || \"all\";\n		if ($routeParams.sub) $scope.params.sub = $routeParams.sub;\n		else if (rpSubredditsUtilService.currentSub) $scope.params.sub = rpSubredditsUtilService.currentSub;\n\n		// If a subreddit has been specified must search for links only.\n		if ($scope.params.sub === 'all' || $scope.params.sub === '') {\n			if ($routeParams.type) \n				$scope.params.type = $routeParams.type;\n			console.log('[rpSearchCtrl] set type, $scope.params.type: ' + $scope.params.type);\n			$scope.type = $scope.params.formType = $scope.params.type;\n			\n		} else {\n			$scope.type = $scope.params.formType = $scope.params.type = 'link';\n			\n		}\n\n		if ($scope.params.type !== 'link') {\n			rpToolbarShadowUtilService.show();\n		}\n\n		if ($routeParams.restrict_sr) \n			$scope.params.restrict_sr = $routeParams.restrict_sr;\n\n		if ($routeParams.t) $scope.params.t = $routeParams.t;\n\n		if ($routeParams.sort) \n			$scope.params.sort = $routeParams.sort;\n		rpSearchTabsUtilService.setTab($scope.params.sort);\n\n		if ($routeParams.after)\n			$scope.params.after = $routeParams.after;\n		else\n			$scope.params.after = \"\";\n\n		//make sure the search form is open.\n		rpSearchFormUtilService.show();\n\n		/*\n			Initiate first search.\n		 */\n		$rootScope.$emit('progressLoading');\n		\n\n		/*\n			Perform two search requests if we want both subs and links.\n\n		 */\n		if ($scope.params.type === \"sr, link\") {\n\n			console.log('[rpSearchCtrl] load sr and link');\n\n			$scope.params.type = \"sr\";\n			$scope.params.limit = 3;\n			console.log('[rpSearchCtrl] rpSearchUtilService.params.limit: ' + rpSearchUtilService.params.limit);\n\n			rpSearchUtilService.search(function(data) {\n\n				if (data && data.data.children.length > 0) {\n\n					console.log('[rpSearchCtrl] sr + link search(sr), data.data.children.length: ' + data.data.children.length);\n					$scope.subs = data.data.children;\n					$scope.subs.push({more: true});\n					$scope.haveSubs = true;\n					\n					if ($scope.haveSubs && $scope.haveLinks) {\n						console.log('[rpSearchCtrl] sr + link search(sr) over, this should only run once.');\n\n						$rootScope.$emit('progressComplete');\n						$scope.params.limit = 24;\n						$scoep.params.type = \"sr, link\";\n					}\n\n				} else {\n					$scope.nothingSubs = true;\n\n					if ($scope.haveLinks || $scope.nothingLinks) {\n						\n						$rootScope.$emit('progressComplete');\n						$scope.params.limit = 24;\n						$scope.params.type = \"sr, link\";\n\n					}\n				}\n\n			});\n\n			$scope.params.type = \"link\";\n			$scope.params.limit = 3;\n\n			rpSearchUtilService.search(function(data) {\n\n				if (data && data.data.children.length > 0) {\n					console.log('[rpSearchCtrl] sr + link search(link), data.data.children.length: ' + data.data.children.length);\n					$scope.links = data.data.children;\n					$scope.links.push({more: true});\n					$scope.haveLinks = true;\n					\n					if ($scope.haveSubs && $scope.haveLinks) {\n						console.log('[rpSearchCtrl] sr + link search(link) over, this should only run once.');\n						\n						$rootScope.$emit('progressComplete');\n						$scope.params.limit = 24;\n						$scope.params.type = \"sr, link\";\n					}\n				} else {\n					$scope.nothingLinks = true;\n					\n					if ($scope.haveSubs || $scope.nothingSubs) {\n\n						$rootScope.$emit('progressComplete');\n						$scope.params.limit = 24;\n						$scope.params.type = \"sr, link\";\n\n					}\n				}\n\n\n			});\n\n		} else {\n			console.log('[rpSearchCtrl] load sr or link');\n\n			rpSearchUtilService.search(function(data) {\n				$rootScope.$emit('progressComplete');\n\n				if (data && data.data.children.length > 0) {\n					$scope.posts = data.data.children;\n					$scope.havePosts = true;\n					\n				} else {\n					$scope.nothingPosts = true;\n				}\n\n			});\n			\n		}\n\n		$scope.morePosts = function() {\n			console.log('[rpSearchCtrl] morePost()');\n\n			if ($scope.posts && $scope.posts.length > 0) {\n\n				var lastPostName = $scope.posts[$scope.posts.length-1].data.name;\n				console.log('[rpSearchCtrl] morePosts(), lastPostName: ' + lastPostName);\n				console.log('[rpSearchCtrl] morePosts(), loadingMore: ' + loadingMore);\n\n				if (lastPostName && !loadingMore) {\n					loadingMore = true;\n					$scope.params.after = lastPostName;\n					\n					rpLocationUtilService(null, '/search', \n						'q='+ $scope.params.q +\n						'&sub=' + $scope.params.sub + \n						'&type=' + $scope.params.type +\n						'&restrict_sr=' + $scope.params.restrict_sr +\n						'&sort=' + $scope.params.sort +\n						'&after=' + $scope.params.after +\n						'&t=' + $scope.params.t, false, true);\n\n\n					$rootScope.$emit('progressLoading');\n				\n					rpSearchUtilService.search(function(data) {\n						$rootScope.$emit('progressComplete');\n						Array.prototype.push.apply($scope.posts, data.data.children);\n						$scope.havePosts = true;\n						loadingMore = false;\n					});\n				}\n			}\n		};		\n\n		$scope.showComments = function(e, post) {\n			\n			if ($scope.commentsDialog && !e.ctrlKey) {\n				$mdDialog.show({\n					controller: 'rpCommentsDialogCtrl',\n					templateUrl: 'partials/rpCommentsDialog',\n					targetEvent: e,\n					locals: {\n						post: post\n					},\n					clickOutsideToClose: true,\n					escapeToClose: false\n\n				});\n			\n			} else {\n\n				rpLocationUtilService(e, '/r/' + post.data.subreddit + '/comments/' + post.data.id, '', true, false);\n			}\n\n		};\n\n		$scope.searchSub = function(e, post) {\n\n			console.log('[rpSearchCtrl] searchSub, post.data.display_name: ' + post.data.display_name);\n			console.log('[rpSearchCtrl] searchSub, e.ctrlKey: ' + e.ctrlKey);\n\n\n			if (e.ctrlKey) {\n\n				rpLocationUtilService(e, '/search', \n					'q='+ $scope.params.q +\n					'&sub=' + post.data.display_name + \n					'&type=' + \"link\" +\n					'&restrict_sr=' + \"true\" +\n					'&sort=' + \"relevance\" +\n					'&after=' + \"\" +\n					'&t=' + \"all\", true, true);\n\n\n			} else {\n				\n\n				$scope.params.sub = post.data.display_name;\n				$scope.type = $scope.params.formType = $scope.params.type = \"link\";\n				$scope.params.restrict_sr = true;\n				$scope.params.after = \"\";\n				$scope.params.sort = \"relevance\";\n				$scope.params.t = \"all\";\n\n				rpLocationUtilService(null, '/search', \n					'q='+ $scope.params.q +\n					'&sub=' + $scope.params.sub + \n					'&type=' + $scope.params.type +\n					'&restrict_sr=' + $scope.params.restrict_sr +\n					'&sort=' + $scope.params.sort +\n					'&after=' + $scope.params.after +\n					'&t=' + $scope.params.t, false, false);\n\n				$scope.posts = {};\n				$scope.havePosts = false;\n				\n				$scope.nothingPosts = false;\n				$scope.nothingSubs = false;\n				$scope.nothingLinks = false;\n\n				$rootScope.$emit('progressLoading');\n\n				rpToolbarShadowUtilService.hide();\n				\n				rpSearchUtilService.search(function(data) {\n					$rootScope.$emit('progressComplete');\n					$scope.posts = data.data.children;\n					$scope.havePosts = true;\n				});\n\n			}\n\n		};\n\n		$scope.moreSubs = function(e) {\n			console.log('[rpSearchCtrl] moreSubs()');\n\n			if (e.ctrlKey) {\n				rpLocationUtilService(e, '/search', \n					'q='+ $scope.params.q +\n					'&sub=' + 'all' + \n					'&type=' + \"sr\" +\n					'&restrict_sr=' + \"false\" +\n					'&sort=' + \"relevance\" +\n					'&after=' + \"\" +\n					'&t=' + \"all\", true, true);\n\n			} else {\n\n				$scope.params.sub = \"all\";\n				$scope.type = $scope.params.formType = $scope.params.type = \"sr\";\n				$scope.params.restrict_sr = false;\n				$scope.params.after = \"\";\n				$scope.params.sort = \"relevance\";\n				$scope.params.t = \"all\";\n\n				rpLocationUtilService(null, '/search', \n					'q='+ $scope.params.q +\n					'&sub=' + $scope.params.sub + \n					'&type=' + $scope.params.type +\n					'&restrict_sr=' + $scope.params.restrict_sr +\n					'&sort=' + $scope.params.sort +\n					'&after=' + $scope.params.after +\n					'&t=' + $scope.params.t, false, false);\n\n				$scope.posts = {};\n				$scope.subs = {};\n				$scope.links = {};\n\n				$scope.havePosts = false;\n				$scope.haveLinks = false;\n				$scope.haveSubs = false;\n\n				$rootScope.$emit('progressLoading');\n\n				rpSearchUtilService.search(function(data) {\n					$rootScope.$emit('progressComplete');\n					$scope.posts = data.data.children;\n					$scope.havePosts = true;\n				});\n\n			}\n\n		};\n\n		$scope.moreLinks = function(e) {\n			console.log('[rpSearchCtrl] moreSubs()');\n\n			if (e.ctrlKey) {\n				rpLocationUtilService(e, '/search', \n					'q='+ $scope.params.q +\n					'&sub=' + 'all' + \n					'&type=' + \"link\" +\n					'&restrict_sr=' + \"false\" +\n					'&sort=' + \"relevance\" +\n					'&after=' + \"\" +\n					'&t=' + \"all\", true, true);\n				\n			} else {\n\n				$scope.params.sub = \"all\";\n				$scope.type = $scope.params.formType = $scope.params.type = \"link\";\n				$scope.params.restrict_sr = false;\n				$scope.params.after = \"\";\n				$scope.params.sort = \"relevance\";\n				$scope.params.t = \"all\";\n\n				rpLocationUtilService(null, '/search', \n					'q='+ $scope.params.q +\n					'&sub=' + $scope.params.sub + \n					'&type=' + $scope.params.type +\n					'&restrict_sr=' + $scope.params.restrict_sr +\n					'&sort=' + $scope.params.sort +\n					'&after=' + $scope.params.after +\n					'&t=' + $scope.params.t, false, false);\n\n				$scope.posts = {};\n				$scope.subs = {};\n				$scope.links = {};\n\n				$scope.havePosts = false;\n				$scope.haveLinks = false;\n				$scope.haveSubs = false;\n\n				$rootScope.$emit('progressLoading');\n\n				rpToolbarShadowUtilService.hide();\n				\n				rpSearchUtilService.search(function(data) {\n					$rootScope.$emit('progressComplete');\n					$scope.posts = data.data.children;\n					$scope.havePosts = true;\n				});\n			\n			}\n		};\n\n		$scope.savePost = function(post) {\n				\n			rpSaveUtilService(post);\n\n		};\n\n		$scope.upvotePost = function(post) {\n\n			rpUpvoteUtilService(post);\n\n		};\n		\n		$scope.downvotePost = function(post) {\n			\n			rpDownvoteUtilService(post);\n\n		};\n\n		$scope.sharePost = function(e, post) {\n			console.log('[rpSearchCtrl] sharePost(), post.data.url: ' + post.data.url);\n\n			post.bottomSheet = true;\n\n			var shareBottomSheet = $mdBottomSheet.show({\n				templateUrl: 'partials/rpShareBottomSheet',\n				controller: 'rpSharePostCtrl',\n				targetEvent: e,\n				parent: '.rp-view',\n				disbaleParentScroll: true,\n				locals: {\n					post: post\n				}\n			}).then(function() {\n				console.log('[rpSearchCtrl] bottomSheet Resolved: remove rp-bottom-sheet class');\n				post.bottomSheet = false;\n			}).catch(function() {\n				console.log('[rpSearchCtrl] bottomSheet Rejected: remove rp-bottom-sheet class');\n				post.bottomSheet = false;\n			});\n\n		};\n\n		var deregisterSettingsChanged = $rootScope.$on('settings_changed', function(data) {\n			$scope.commentsDialog = rpSettingsUtilService.settings.commentsDialog;\n		});\n\n		var deregisterSearchTimeClick = $rootScope.$on('search_time_click', function(e, time) {\n\n			console.log('[rpSearchCtrl] search_time_click, time: ' + time);\n			\n			$scope.posts = {};\n			$scope.havePosts = false;\n			\n			$scope.params.t = time;\n			$scope.params.after = '';\n\n			rpLocationUtilService(null, '/search', \n					'q='+ $scope.params.q +\n					'&sub=' + $scope.params.sub + \n					'&type=' + $scope.params.type +\n					'&restrict_sr=' + $scope.params.restrict_sr +\n					'&sort=' + $scope.params.sort +\n					'&after=' + $scope.params.after +\n					'&t=' + $scope.params.t, false, true);\n\n			$scope.posts = {};\n			$scope.havePosts = false;\n			$rootScope.$emit('progressLoading');\n			\n			rpSearchUtilService.search(function(data) {\n				$rootScope.$emit('progressComplete');\n				$scope.posts = data.data.children;\n				$scope.havePosts = true;\n			});\n\n		});\n\n		var deregisterSearchTabClick = $rootScope.$on('search_tab_click', function(e, tab) {\n\n			console.log('[rpSearchCtrl] search_tab_click, tab: ' + tab);\n			$scope.params.sort = tab;\n			$scope.params.after = '';\n\n			rpLocationUtilService(null, '/search', \n				'q='+ $scope.params.q +\n				'&sub=' + $scope.params.sub + \n				'&type=' + $scope.params.type +\n				'&restrict_sr=' + $scope.params.restrict_sr +\n				'&sort=' + $scope.params.sort +\n				'&after=' + $scope.params.after +\n				'&t=' + $scope.params.t, false, true);\n\n			$scope.posts = {};\n			$scope.havePosts = false;\n			$rootScope.$emit('progressLoading');\n			\n			rpSearchUtilService.search(function(data) {\n				$rootScope.$emit('progressComplete');\n				$scope.posts = data.data.children;\n				$scope.havePosts = true;\n			});\n\n		});\n\n		var deregisterSearchFormSubmitted = $rootScope.$on('search_form_submitted', function() {\n\n			$scope.posts = {};\n			$scope.havePosts = false;\n\n			$scope.nothingPosts = false;\n			$scope.nothingSubs = false;\n			$scope.nothingLinks = false;\n\n			$rootScope.$emit('progressLoading');\n			$scope.type = $scope.params.type;\n			\n			if ($scope.params.type !== 'link') {\n				// rpToolbarShadowUtilService.showToolbarShadow = true;\n				rpToolbarShadowUtilService.show();\n			} else {\n				// rpToolbarShadowUtilService.showToolbarShadow = false;\n				rpToolbarShadowUtilService.hide();\n			}\n			\n			/*\n				Perform two search requests if we want both subs and links.\n		 	*/\n			if ($scope.params.type === \"sr, link\") {\n\n				console.log('[rpSearchCtrl] load sr and link');\n\n				$scope.subs = {};\n				$scope.haveSubs = false;\n\n				$scope.params.type = \"sr\";\n				$scope.params.limit = 3;\n				console.log('[rpSearchCtrl] rpSearchUtilService.params.limit: ' + rpSearchUtilService.params.limit);\n\n				rpSearchUtilService.search(function(data) {\n					\n					if (data && data.data.children.length > 0) {\n\n						$scope.subs = data.data.children;\n						$scope.subs.push({more: true});\n						$scope.haveSubs = true;\n\n						console.log('[rpSearchCtrl] sr + link, subs loaded, $scope.links.length: ' + $scope.links.length + \", $scope.subs.length: \" + $scope.subs.length);\n						\n						if ($scope.haveSubs && $scope.haveLinks) {\n							console.log('[rpSearchCtrl] sr + link search() over, this should only run once.');\n							$rootScope.$emit('progressComplete');\n							$scope.params.limit = 24;\n							$scope.params.type = \"sr, link\";\n						}\n						\n					} else {\n						console.log('[rpSearchCtrl] submitSearchForm, no subs found.');\n						$scope.nothingSubs = true;\n\n						if ($scope.haveLinks || $scope.nothingLinks) {\n							$rootScope.$emit('progressComplete');\n							$scope.params.limit = 24;\n							$scope.params.type = \"sr, link\";\n\n						}\n\n					}\n\n\n				});\n\n				$scope.links = {};\n				$scope.haveLinks = false;\n\n				$scope.params.type = \"link\";\n				$scope.params.limit = 3;\n\n				rpSearchUtilService.search(function(data) {\n\n					if (data && data.data.children.length > 0) {\n						$scope.links = data.data.children;\n						$scope.links.push({more: true});\n						$scope.haveLinks = true;\n						\n						console.log('[rpSearchCtrl] sr + link, links loaded, $scope.links.length: ' + $scope.links.length + \", $scope.subs.length: \" + $scope.subs.length);\n\n						if ($scope.haveSubs && $scope.haveLinks) {\n							console.log('[rpSearchCtrl] sr + link search() over, this should only run once.');\n							$rootScope.$emit('progressComplete');\n							$scope.params.limit = 24;\n							$scope.params.type = \"sr, link\";\n						}\n						\n					} else {\n						console.log('[rpSearchCtrl] submitSearchForm, no links found.');\n						$scope.nothingLinks = 0;\n\n						if ($scope.haveSubs || $scope.nothingSubs) {\n							$rootScope.$emit('progressComplete');\n							$scope.params.limit = 24;\n							$scope.params.type = \"sr, link\";\n\n						}\n\n					}\n\n\n				});\n\n\n			} else {\n\n				console.log('[rpSearchCtrl] load sr or link');\n\n				rpSearchUtilService.search(function(data) {\n					$rootScope.$emit('progressComplete');\n					\n					if (data && data.data.children.length > 0) {\n						$scope.posts = data.data.children;\n						$scope.havePosts = true;\n						$scope.type = $scope.params.type;\n						\n					} else {\n						console.log('[rpSearchCtrl] submitSearchForm, no posts found.');\n						$scope.nothingPosts = true;\n					}\n\n				});\n				\n			}\n\n		});\n\n		$scope.$on('$destroy', function() {\n			console.log('[rpSearchCtrl] destroy()');\n			deregisterSearchFormSubmitted();\n			deregisterSearchTabClick();\n			deregisterSearchTimeClick();\n			deregisterSettingsChanged();\n		});\n\n	}\n]);\n\nrpSearchControllers.controller('rpSearchTabsCtrl', ['$scope', '$rootScope', 'rpSearchTabsUtilService',\n	function ($scope, $rootScope, rpSearchTabsUtilService) {\n\n		selectTab();\n		var firstLoadOver = false;\n\n		$scope.tabClick = function(tab) {\n			console.log('[rpSearchTabsCtrl] tabClick(), tab: ' + tab);\n\n			if (firstLoadOver) {\n				console.log('[rpSearchTabsCtrl] tabClick() firstLoadOver');\n				$rootScope.$emit('search_tab_click', tab);\n				rpSearchTabsUtilService.setTab(tab);\n				\n			} else {\n				console.log('[rpSearchTabsCtrl] tabClick(), firstLoad - do nothing');\n				firstLoadOver = true;\n			}\n\n		};\n\n		var deregisterSearchTabChange = $rootScope.$on('search_tab_change', function(e, tab) {\n\n			console.log('[rpSearchTabsCtrl] search_tab_change');\n			selectTab();\n\n		});\n\n\n		function selectTab() {\n\n			var tab = rpSearchTabsUtilService.tab;\n			console.log('[rpSearchTabsCtrl] selectTab(), tab: ' + tab);\n\n			switch(tab) {\n				case 'relevance':\n					$scope.selectedIndex = 0;\n					break;\n				case 'top':\n					$scope.selectedIndex = 1;\n					break;\n				case 'new':\n					$scope.selectedIndex = 2;\n					break;\n				case 'comments':\n					$scope.selectedIndex = 3;\n\n			}\n		}\n\n		$scope.$on('$destroy', function() {\n			console.log('[rpSearchTabsCtrl] destroy()');\n			deregisterSearchTabChange();\n		});\n\n	}\n]);\n\nrpSearchControllers.controller('rpSearchTimeFilterCtrl', ['$scope', '$rootScope', 'rpSearchUtilService',\n	function ($scope, $rootScope, rpSearchUtilService) {\n\n		$scope.type = rpSearchUtilService.params.type;\n\n		console.log('[rpSearchTimeFilterCtrl] $scope.type: ' + $scope.type);\n\n		$scope.selectTime = function(value) {\n			$rootScope.$emit('search_time_click', value);\n		};\n	}\n]);\n\nrpSearchControllers.controller('rpSearchSubscriptionCtrl', ['$scope', '$rootScope', 'rpSubredditsUtilService',\n	function($scope, $rootScope, rpSubredditsUtilService) {\n		console.log('[rpSearchSubscriptionCtrl] loaded.');\n\n		$scope.loadingSubscription = false;\n		// $scope.subscribed = false;\n		$scope.subscribed = rpSubredditsUtilService.isSubscribed($scope.post.data.display_name);\n\n		$scope.toggleSubscription = function() {\n			$scope.loadingSubscription = true;\n			\n			var action = $scope.subscribed ? 'unsub' : 'sub';\n			\n			console.log('[rpSearchSubscriptionCtrl] toggleSubscription(), $scope.post.data.title: ' + $scope.post.data.display_name);\n\n			rpSubredditsUtilService.subscribe(action, $scope.post.data.name, function() {\n				$scope.loadingSubscription = false;\n				$scope.subscribed = !$scope.subscribed;\n			});\n\n		};\n\n		var deregisterSubredditsUpdated = $rootScope.$on('subreddits_updated', function() {\n\n			$scope.subscribed = rpSubredditsUtilService.isSubscribed($scope.post.data.display_name);\n\n		});\n\n		$scope.$on('$destroy', function() {\n			deregisterSubredditsUpdated();\n\n		});\n\n	}\n]);",
			"file": "public/javascript/ng-app/rpSearchControllers.js",
			"file_size": 26069,
			"file_write_time": 130855025753782388,
			"settings":
			{
				"buffer_size": 25206,
				"line_ending": "Windows"
			}
		},
		{
			"file": "views/index.jade",
			"settings":
			{
				"buffer_size": 11123,
				"line_ending": "Windows"
			}
		},
		{
			"file": "public/javascript/ng-app/rpUtilServices.js",
			"settings":
			{
				"buffer_size": 23015,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 708.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"sublimeLinter choose",
				"SublimeLinter: Choose Mark Style"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"linter",
				"SublimeLinter: Choose Mark Style"
			],
			[
				"mark",
				"SublimeLinter: Choose Mark Style"
			],
			[
				"sublimelinter",
				"SublimeLinter: Enable Linter"
			],
			[
				"vmen",
				"View: Toggle Menu"
			],
			[
				"isntall",
				"Package Control: Install Package"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"rem",
				"Package Control: Remove Package"
			],
			[
				"git ",
				"Git: Commit"
			],
			[
				"git push ",
				"Git: Push Current Branch"
			],
			[
				"git commit",
				"Git: Commit"
			],
			[
				"git add",
				"Git: Add..."
			],
			[
				"packa",
				"Package Control: List Packages"
			],
			[
				"for",
				"Format Code"
			],
			[
				"form",
				"Format Code"
			],
			[
				"Package Control: instal",
				"Package Control: Install Package"
			]
		],
		"width": 1020.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/jalal/workspace/redditplus",
		"/C/Users/jalal/workspace/redditplus/public",
		"/C/Users/jalal/workspace/redditplus/public/javascript",
		"/C/Users/jalal/workspace/redditplus/public/javascript/ng-app",
		"/C/Users/jalal/workspace/redditplus/public/stylesheets",
		"/C/Users/jalal/workspace/redditplus/public/stylesheets/less",
		"/C/Users/jalal/workspace/redditplus/reddit",
		"/C/Users/jalal/workspace/redditplus/views",
		"/C/Users/jalal/workspace/redditplus/views/partials"
	],
	"file_history":
	[
		"/C/Users/jalal/workspace/redditplus/public/stylesheets/less/rp-search.less",
		"/C/Users/jalal/workspace/redditplus/views/partials/rpSearch.jade",
		"/C/Users/jalal/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/jalal/workspace/redditplus/public/javascript/ng-app/rpApp.js",
		"/C/Users/jalal/workspace/redditplus/views/partials/rpSearchLink.jade",
		"/C/Users/jalal/workspace/redditplus/public/javascript/ng-app/rpPostControllers.js",
		"/C/Users/jalal/AppData/Roaming/Sublime Text 3/Packages/User/SublimeLinter.sublime-settings",
		"/C/Users/jalal/AppData/Roaming/Sublime Text 3/Packages/SublimeLinter/SublimeLinter.sublime-settings",
		"/C/Users/jalal/workspace/redditplus/views/head.jade",
		"/C/Users/jalal/workspace/redditplus/public/javascript/actionButtonSelectHelper.js",
		"/C/Users/jalal/workspace/redditplus/views/index.jade",
		"/C/Users/jalal/workspace/redditplus/views/partials/rpMessage.jade",
		"/C/Users/jalal/workspace/redditplus/views/partials/rpUser.jade",
		"/C/Users/jalal/workspace/redditplus/public/stylesheets/less/rp-post.less",
		"/C/Users/jalal/workspace/redditplus/public/stylesheets/less/variables.less",
		"/C/Users/jalal/workspace/redditplus/public/stylesheets/less/rp-content.less",
		"/C/Users/jalal/workspace/redditplus/public/stylesheets/less/fonts.less",
		"/C/Users/jalal/workspace/redditplus/reddit/redditApiHandler.js",
		"/C/Users/jalal/workspace/redditplus/reddit/redditApiRouter.js",
		"/C/Users/jalal/workspace/redditplus/public/javascript/ng-app/rpFilters.js",
		"/C/Users/jalal/workspace/redditplus/public/stylesheets/less/style.less",
		"/C/Users/jalal/workspace/redditplus/public/javascript/ng-app/rpDirectives.js",
		"/C/Users/jalal/workspace/redditplus/public/stylesheets/less/rp-toolbar.less",
		"/C/Users/jalal/workspace/redditplus/views/partials/rpUserPost.jade",
		"/C/Users/jalal/workspace/redditplus/views/partials/rpUserComment.jade",
		"/C/Users/jalal/workspace/redditplus/public/javascript/ng-app/rpCommentsControllers.js",
		"/C/Users/jalal/workspace/redditplus/public/javascript/ng-app/rpUserControllers.js",
		"/C/Users/jalal/workspace/redditplus/public/javascript/ng-app/rpMessageControllers.js",
		"/C/Users/jalal/workspace/redditplus/public/javascript/ng-app/rpControllers.js",
		"/C/Users/jalal/workspace/redditplus/public/javascript/ng-app/rpResourceServices.js",
		"/C/Users/jalal/workspace/redditplus/views/partials/rpPosts.jade",
		"/C/Users/jalal/workspace/redditplus/views/partials/rpPost.jade",
		"/C/Users/jalal/workspace/redditplus/public/javascript/hideEmbeds.js",
		"/C/Users/jalal/workspace/redditplus/public/javascript/postColumns.js",
		"/C/Users/jalal/workspace/redditplus/public/javascript/calcWatchers.js",
		"/C/Users/jalal/workspace/redditplus/public/javascript/ng-app/rpMediaDirectives.js",
		"/C/Users/jalal/workspace/redditplus/public/javascript/ng-app/rpMediaControllers.js",
		"/C/Users/jalal/workspace/redditplus/views/partials/rpUserLink.jade",
		"/C/Users/jalal/workspace/redditplus/reddit/redditAuth.js",
		"/C/Users/jalal/workspace/redditplus/reddit/redditAuthRouter.js",
		"/C/Users/jalal/workspace/redditplus/rpApp/rpSettingsHandler.js",
		"/home/cavemanninja/workspace/redditplus/rpApp/rpApp.js",
		"/home/cavemanninja/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/cavemanninja/workspace/redditplus/rpApp/rpServer.js",
		"/home/cavemanninja/workspace/redditplus/rpApp/rpRouter.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/rpApp.js",
		"/home/cavemanninja/workspace/redditplus/views/partials/rpPosts.jade",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/rpUtilServices.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/rpPostControllers.js",
		"/home/cavemanninja/workspace/redditplus/views/partials/rpComment.jade",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/rpCommentsControllers.js",
		"/home/cavemanninja/workspace/redditplus/reddit/redditApiRouter.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/rpCommentControllers.js",
		"/home/cavemanninja/workspace/redditplus/app.js",
		"/home/cavemanninja/workspace/redditplus/bower.json",
		"/home/cavemanninja/workspace/redditplus/package.json",
		"/home/cavemanninja/workspace/redditplus/views/head.jade",
		"/home/cavemanninja/.config/sublime-text-3/Packages/User/SublimeLinter.sublime-settings",
		"/home/cavemanninja/.config/sublime-text-3/Packages/SublimeLinter/SublimeLinter.sublime-settings",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/directives.js",
		"/usr/share/applications/sublime_text.desktop",
		"/home/cavemanninja/.config/sublime-text-3/Local/Session.sublime_session",
		"/home/cavemanninja/workspace/redditplus/public/stylesheets/less/style.less",
		"/C/Users/Jalal/workspace/redditplus/views/partials/rpImgurAlbum.jade",
		"/C/Users/Jalal/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/Jalal/workspace/redditplus/views/partials/rpSubreddits.jade",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/calcWatchers.js",
		"/C/Users/Jalal/workspace/redditplus/views/partials/rpMedia.jade",
		"/C/Users/Jalal/workspace/redditplus/views/partials/rpPost.jade",
		"/C/Users/Jalal/workspace/redditplus/views/partials/rpPosts.jade",
		"/C/Users/Jalal/workspace/redditplus/views/index.jade",
		"/C/Users/Jalal/workspace/redditplus/public/stylesheets/less/fonts.less",
		"/C/Users/Jalal/workspace/redditplus/views/head.jade",
		"/C/Users/Jalal/workspace/redditplus/views/partials/rpTweet.jade",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/postColumns.js",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/suspendColumns.js",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/ng-app/app.js",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/ng-app/postsController.js",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/ng-app/directives.js",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/hideEmbeds.js",
		"/C/Users/Jalal/workspace/redditplus/bower_components/angular-masonry/angular-masonry.js",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/progress.js",
		"/C/Users/Jalal/workspace/redditplus/public/stylesheets/css/deckgrid.css",
		"/C/Users/Jalal/workspace/redditplus/bower.json",
		"/C/Users/Jalal/workspace/redditplus/views/partials/rpToast.jade",
		"/C/Users/Jalal/workspace/redditplus/app.js",
		"/C/Users/Jalal/workspace/redditplus/reddit/redditApiRouter.js",
		"/C/Users/Jalal/workspace/redditplus/reddit/redditAuthRouter.js",
		"/C/Users/Jalal/workspace/redditplus/routes/index.js",
		"/C/Users/Jalal/workspace/redditplus/public/stylesheets/less/style.less",
		"/C/Users/Jalal/workspace/redditplus/views/partials/subredditPosts.jade",
		"/C/Users/Jalal/workspace/redditplus/public/stylesheets/css/scroll.css",
		"/C/Users/Jalal/workspace/redditplus/reddit/redditApiHandler.js",
		"/C/Users/Jalal/workspace/redditplus/public/images/icons/upvote.svg",
		"/C/Users/Jalal/workspace/redditplus/bower_components/core-icons/core-icons.html",
		"/C/Users/Jalal/workspace/redditplus/bower_components/core-icons/social-icons.html",
		"/C/Users/Jalal/workspace/redditplus/public/images/icons/reddit-icons.html",
		"/C/Users/Jalal/workspace/redditplus/bower_components/core-icons/maps-icons.html",
		"/C/Users/Jalal/workspace/redditplus/bower_components/core-icons/demo.html",
		"/C/Users/Jalal/workspace/redditplus/reddit/redditServer.js",
		"/C/Users/Jalal/workspace/redditplus/reddit/redditAuth.js",
		"/C/Users/Jalal/workspace/redditplus/reddit/config.json",
		"/C/Users/Jalal/workspace/redditplus/public/images/icons/ic_favorite_24px.svg",
		"/C/Users/Jalal/workspace/redditplus/public/images/icons/arrow-down1.svg",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/controllers.js",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/directives.js",
		"/C/Users/Jalal/workspace/redditplus/views/partials/sidenavSubreddits.jade",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/app.js",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/filters.js",
		"/C/Users/Jalal/workspace/redditplus/package.json",
		"/C/Users/Jalal/workspace/redditplus/routes/config.json",
		"/C/Users/Jalal/workspace/redditplus/node_modules/snoocore/oauth.js",
		"/C/Users/Jalal/workspace/redditplus/routes/api.js",
		"/C/Users/Jalal/AppData/Roaming/Sublime Text 3/Packages/SublimeCodeIntel/SublimeCodeIntel.sublime-settings",
		"/C/Users/Jalal/AppData/Roaming/Sublime Text 3/Packages/User/SublimeLinter.sublime-settings",
		"/C/Users/Jalal/workspace/redditplus/reddit/redditApi.js",
		"/C/Users/Jalal/workspace/redditplus/routes/auth.js",
		"/C/Users/Jalal/workspace/redditplus/node_modules/mongoose/package.json",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/services.js",
		"/C/Users/Jalal/workspace/redditplus/gulpfile.js",
		"/C/Users/Jalal/Downloads/DwnjTNuvVt/css/styles.css",
		"/C/Users/Jalal/Downloads/DwnjTNuvVt/js/scripts.js",
		"/C/Users/Jalal/Downloads/DwnjTNuvVt/index.html",
		"/C/Users/Jalal/workspace/angular_tutorial/angular-phonecat/app/js/controllers.js",
		"/C/Users/Jalal/workspace/angular_tutorial/angular-phonecat/app/js/services.js",
		"/C/Users/Jalal/workspace/redditplus/views/layout.jade",
		"/C/Users/Jalal/workspace/redditplus/gulp.js",
		"/C/Users/Jalal/workspace/redditplus/public/stylesheets/css/main.css"
	],
	"find":
	{
		"height": 132.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"params.formTYpe",
			"rpPostsTabsUtilService",
			"formParams",
			"$mdTabsCtrl.select)",
			"form",
			"rpSearchUtilService",
			"formParams",
			"setParams",
			"count",
			"setParams",
			"count",
			"havePosts",
			"rp-post-actions",
			"cursor: hand",
			"cursor",
			"pointer",
			"rp-link",
			"rpPostCtrl",
			"setParams",
			"rpSearchFilterButtonUtilService",
			"gilded",
			"overview",
			"subreddits",
			"session.save",
			"menu_visible",
			"tine",
			"md-ripple-container",
			"rp-loaded",
			"rp-card",
			"rp-subreddit",
			"rp-content",
			"rp-suspendable, ",
			"')\n",
			"::",
			"\n	",
			"toolbarTitle",
			"rp-button",
			"core-",
			"posts",
			"  \n",
			"bson",
			"newRedd",
			"done",
			"%',\n",
			"toggle",
			"javascript",
			"tab",
			"open",
			"plugins",
			"api",
			"development",
			"open",
			"167",
			"#mOD167",
			"#Mod167",
			"#Mod103",
			"Mod103",
			"cat-children",
			"no-margin",
			"<fieldset>",
			"JFactory::getApplication()->enqueueMessage",
			"dark",
			"debug",
			"parent",
			"ar_cat_string",
			"author",
			"csv_parse",
			"color: #ffffff;",
			"background-color: #4873aa",
			"background-color: #aaaaaa",
			"sql",
			"sendEmail",
			"in_arr",
			"edit service",
			"IMAGE",
			"صورة",
			"IMAGE",
			"Image",
			"type=\"media\"",
			"type=\"text\"",
			"units",
			"remove_defau",
			"Image",
			"BBIC Admin",
			"Conference Room",
			"Meeting Room",
			"Conference Room",
			"Warehouse",
			"First Floor",
			"Ground Floor",
			"Unit",
			"Building",
			"?>\n",
			"#Mod129",
			"tenant-no",
			"ddata-content",
			"data-titl1e",
			"data-content",
			"ata-title",
			"data-title",
			"map-popover",
			"TPL_MAP",
			"TPL_MAP_",
			"DESC_IMAGE",
			"TPL_MAP",
			"DESC_IMAGE",
			"TPL_MAP_LOT",
			"DESC_IMAGE",
			"TPL_MAP_BUILDING8",
			"TPL_MAP",
			"TPL_MAP_",
			"DESC",
			"'); ?>'\">",
			"alt=\"\"",
			"; ?>'\">",
			"w4_1",
			"bdb_1_1st",
			"bdb_1_g",
			"w3_1_1st",
			"w3_1_g",
			"w1_1_1st",
			"w1_1_g",
			"lotc_1",
			"lotb_1",
			"lota_1",
			"building8_1",
			"\">",
			"</i"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": true,
		"regex": false,
		"replace_history":
		[
			"time",
			"masonry-brick",
			"",
			"#Mod167",
			"#mOD167, #Mod168",
			"#mOD103, #Mod167",
			"Mod167",
			"force-no-margin",
			"",
			"LINK",
			"رابط",
			"صورة",
			"الادارة",
			"قاعة المؤتمرات",
			"غرفة الاجتماعات",
			"ورشات",
			"الطابق الأول",
			"الطابق الأرضي",
			"وحدة",
			"مبنى",
			"#Mod129, #Mod160",
			"data-content",
			"data-title",
			"data-titl1e",
			"data-title1",
			"campus-map-popover",
			"IMAGE_DESC",
			"'); ?>'>\">",
			"alt=''",
			"; ?>'>\">",
			"wh_1",
			"w4_1",
			"bdb_1_1st",
			"bdb_1_g",
			"w3_1_1st",
			"w3_1_g",
			"w1_1_1st",
			"w1_1_g",
			"lotc_1",
			"lotb_1",
			"lota_1",
			"\" data-html=\"true\" \n						data-content=\"<img class='building-img' alt=\"\" height='75' width='75' src='<?php echo JUri::base().$attribs->get('map_building8_1_image'); ?>'\">",
			"\" data-html=\"true\" data-content=\"<img class='building-img' alt=\"\" height='75' width='75' src='<?php echo JUri::base().$attribs->get('map_building8_1_image'); ?>'\">",
			"</div",
			"<div",
			"content",
			"_g",
			"bdb",
			"w3",
			"_1st",
			"w1",
			"_g'>\".$attribs->",
			"_g').\"</option>\";",
			"w3",
			"_1st",
			"_g') != \"\") {",
			"w1",
			"wh",
			"w4",
			"lotc",
			"lotb",
			"BDB",
			"bdb",
			"LOTC",
			"lotc",
			"lotb",
			"LOTB",
			"lotc",
			"i",
			"class3",
			"",
			"dashed",
			"bbic/joomla",
			"2"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "public/javascript/ng-app/rpSearchControllers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25206,
						"regions":
						{
						},
						"selection":
						[
							[
								2276,
								2276
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1089.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "views/index.jade",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11123,
						"regions":
						{
						},
						"selection":
						[
							[
								4172,
								4158
							]
						],
						"settings":
						{
							"syntax": "Packages/Jade/Syntaxes/Jade.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2263.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "public/javascript/ng-app/rpUtilServices.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23015,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 42.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 139.0
	},
	"pinned_build_system": "",
	"project": "redditplus.sublime-project",
	"replace":
	{
		"height": 80.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"calc",
				"public\\javascript\\calcWatchers.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 1000.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\Users\\Jalal\\workspace\\redditplus\\styles.sublime-workspace"
			]
		],
		"width": 760.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 529.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
