{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"padding",
				"padding-top"
			],
			[
				"en",
				"encodeURIComponent"
			],
			[
				"share",
				"shareTitle〔argument〕"
			],
			[
				"rpPostC",
				"rpPostCtrl"
			],
			[
				"compose",
				"composeDialog"
			],
			[
				"rpShare",
				"rpSharePostCtrl"
			],
			[
				"margin",
				"margin-left"
			],
			[
				"md",
				"mdBottomSheet"
			],
			[
				"dere",
				"deregisterRouteUpdate〔variable〕"
			],
			[
				"rpIdentity",
				"rpIdentityUtilService〔variable〕"
			],
			[
				"layout-",
				"layout-align"
			],
			[
				"deregi",
				"deregisterHandleTitleChange"
			],
			[
				"dereg",
				"deregisterLocationChangeSuccess"
			],
			[
				"de",
				"deregisterSettingsChanged"
			],
			[
				"deregis",
				"deregisterProgressComplete"
			],
			[
				"deregister",
				"deregisterUserSortButtonVisibility"
			],
			[
				"rp-comments-threaprogress",
				"rp-comments-thread-progress-wrapper"
			],
			[
				"thread",
				"threadLoading"
			],
			[
				"is",
				"isSubscribed"
			],
			[
				"rpSubreddits",
				"rpSubredditsUtilService"
			],
			[
				"redd",
				"redditApiHandler〔variable〕"
			],
			[
				"rpSubredd",
				"rpSubredditsUtilService〔argument〕"
			],
			[
				"rpSubreddit",
				"rpSubredditsUtilService〔variable〕"
			],
			[
				"update",
				"updateSubscriptionStatus"
			],
			[
				"rpSub",
				"rpSubmitUtilService"
			],
			[
				"rpSubred",
				"rpSubredditsUtilService"
			],
			[
				"rpSubredi",
				"rpSubredditsUtilService〔argument〕"
			],
			[
				"rpPostsS",
				"rpPostsSubUtilService〔variable〕"
			],
			[
				"root",
				"rootScope"
			],
			[
				"comments",
				"commentsDialog"
			],
			[
				"rpCommentC",
				"rpCommentCtrl"
			],
			[
				"rpSett",
				"rpSettingsUtilService〔argument〕"
			],
			[
				"rpSettings",
				"rpSettingsUtilService"
			],
			[
				"hide",
				"hideWarning"
			],
			[
				"feed",
				"feedbackLinkRe〔variable〕"
			],
			[
				"rpPost",
				"rpPostsUtilService〔argument〕"
			],
			[
				"showFeed",
				"showFeedbackAlert"
			],
			[
				"show",
				"showFeedback"
			],
			[
				"rpMessage",
				"rpMessageComposeUtilService"
			],
			[
				"rpMessageComposeForm",
				"rpMessageComposeFormCtrl"
			],
			[
				"reset",
				"resetSudreddit〔variable〕"
			],
			[
				"rpPostF",
				"rpPostSubmitFormCtrl"
			],
			[
				"rpU",
				"rpUtilServices〔variable〕"
			],
			[
				"feedback",
				"feedbackMessage"
			],
			[
				"sub",
				"submitAction"
			],
			[
				"submit",
				"submitButtonText"
			],
			[
				"feedbackLink",
				"feedbackLinkName"
			],
			[
				"showFeedback",
				"showFeedbackLink"
			],
			[
				"rpPostSubmit",
				"rpPostSubmitFormCtrl"
			],
			[
				"rateLi",
				"rateLimitSubmitDisbaled"
			],
			[
				"rpPostSub",
				"rpPostSubmitFormCtrl"
			],
			[
				"rpCap",
				"rpCaptchaCtrl"
			],
			[
				"showCaptcha",
				"showCaptchaProgess"
			],
			[
				"captcha",
				"captchaImage"
			],
			[
				"new",
				"newCaptcha"
			],
			[
				"rpCaptcha",
				"rpCaptchaUtilService"
			],
			[
				"submitted",
				"submittedLink"
			],
			[
				"con",
				"controller	Angular.js"
			],
			[
				"rpMessageC",
				"rpMessageCompose"
			],
			[
				"template",
				"templateUrl〔variable〕"
			],
			[
				"messa",
				"messageSending"
			],
			[
				"rpMEssageCom",
				"rpMessageComposeUtilService"
			],
			[
				"rpToast",
				"rpToastUtilService"
			],
			[
				"rpM",
				"rpMessageControllers〔variable〕"
			],
			[
				"rpUser",
				"rpUserSortButtonUtilService〔argument〕"
			],
			[
				"rpUSer",
				"rpUserSortButtonUtilService"
			],
			[
				"rpFitler",
				"rpFilterButtonUtilService〔argument〕"
			],
			[
				"rpFilter",
				"rpFilterButtonUtilService〔argument〕"
			],
			[
				"rp",
				"rpFilterButtonUtilService"
			],
			[
				"rpComments",
				"rpCommentsTabUtilService"
			],
			[
				"rpPostsTa",
				"rpPostsTabUtilService〔argument〕"
			],
			[
				"rpMessa",
				"rpMessageTabUtilService〔argument〕"
			],
			[
				"rpMessageTa",
				"rpMessageTabUtilService"
			],
			[
				"rpMess",
				"rpMessageTabUtilService"
			],
			[
				"rpMEssage",
				"rpMessageTabUtilService"
			],
			[
				"post",
				"postDirectMessageReply"
			],
			[
				"rpMes",
				"rpMessageCommentCtrl"
			],
			[
				"rpIdentit",
				"rpIdentityUtilService"
			],
			[
				"rpI",
				"rpIdentityUtilService"
			],
			[
				"rpMessageCo",
				"rpMessageCommentReplyCtrl"
			],
			[
				"progress",
				"progressComplete"
			],
			[
				"link",
				"linkIdRe〔variable〕"
			],
			[
				"d",
				"directive"
			],
			[
				"progr",
				"progressComplete"
			],
			[
				"pro",
				"progressComplete"
			],
			[
				"lo",
				"lastPostName"
			],
			[
				"rpCom",
				"rpCommentsService"
			],
			[
				"rpPo",
				"rpPostControllers〔variable〕"
			],
			[
				"rpPosr",
				"rpPostCommentUtilService〔argument〕"
			],
			[
				"reddit",
				"redditPlusServices〔variable〕"
			],
			[
				"save",
				"savePost"
			],
			[
				"redditPlus",
				"redditPlusControllers〔variable〕"
			],
			[
				"toggle",
				"toggleReply"
			],
			[
				"parent",
				"parent_id"
			],
			[
				"thumbnail",
				"thumbnailElement"
			],
			[
				"thumb",
				"thumbnailUrl"
			],
			[
				"webm",
				"webmUrl"
			],
			[
				"default",
				"defaultType"
			],
			[
				"giphy",
				"giphyType"
			],
			[
				"gihpy",
				"giphyType"
			],
			[
				"rpMEdia",
				"rpMediaGiphyCtrl"
			],
			[
				"gfy",
				"gfycatRe〔variable〕"
			],
			[
				"gfycat",
				"gfycatRe"
			],
			[
				"rpMedia",
				"rpMediaGfycat"
			],
			[
				"rp_meida",
				"rp_media_imgur_url"
			],
			[
				"redditPl",
				"redditPlusFilters〔variable〕"
			],
			[
				"twitter",
				"twitterRe〔variable〕"
			],
			[
				"redditpl",
				"redditPlusControllers〔variable〕"
			],
			[
				"youtube",
				"youtubeAltRe〔variable〕"
			],
			[
				"imgur",
				"imgurAlbumRe"
			],
			[
				"media",
				"mediaCtrl"
			],
			[
				"comment",
				"commentBody"
			],
			[
				"te",
				"testImageUrl"
			],
			[
				"return",
				"return_val"
			],
			[
				"more",
				"moreChildrenService"
			],
			[
				"redditP",
				"redditPlusServices〔variable〕"
			],
			[
				"toast",
				"toastMessage"
			],
			[
				"get",
				"getInstance"
			],
			[
				"refresh",
				"refreshServer〔function〕"
			],
			[
				"refr",
				"refreshServer〔function〕"
			],
			[
				"ge",
				"generatedState"
			],
			[
				"normal",
				"normal-text-color"
			],
			[
				"ng-",
				"ng-if"
			],
			[
				"rp-ba",
				"rp-background-card"
			],
			[
				"rp-back",
				"rp-background-content"
			],
			[
				"material",
				"material-red-400"
			],
			[
				"string",
				"stringify"
			],
			[
				"text",
				"text-align"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "'use strict';\n\nvar rpPostControllers = angular.module('rpPostControllers', []);\n\nrpPostControllers.controller('rpPostsCtrl',\n	[\n		'$scope',\n		'$rootScope',\n		'$routeParams',\n		'$log',\n		'$window',\n		'$location',\n		'$filter',\n		'$timeout',\n		'rpPostsUtilService',\n		'rpTitleChangeService',\n		'rpSubredditService',\n		'$mdToast',\n		'$mdDialog',\n		'$mdBottomSheet',\n		'rpSaveUtilService',\n		'rpUpvoteUtilService',\n		'rpDownvoteUtilService',\n		'rpPostsTabsUtilService',\n		'rpUserFilterButtonUtilService',\n		'rpUserSortButtonUtilService',\n		'rpSubscribeButtonUtilService',\n		'rpSettingsUtilService',\n		'rpSubredditsUtilService',\n		'rpLocationUtilService',\n		'rpByIdUtilService',\n\n\n		function($scope, $rootScope, $routeParams, $log, $window, $location, $filter, $timeout, rpPostsUtilService, \n			rpTitleChangeService, rpSubredditService, $mdToast, $mdDialog, $mdBottomSheet, rpSaveUtilService, rpUpvoteUtilService, \n			rpDownvoteUtilService, rpPostsTabsUtilService, rpUserFilterButtonUtilService, rpUserSortButtonUtilService, \n			rpSubscribeButtonUtilService, rpSettingsUtilService, rpSubredditsUtilService, rpLocationUtilService, rpByIdUtilService) {\n\n			// console.log('[rpPostsCtrl] Loaded.');\n\n			$scope.posts = {};\n\n			rpUserFilterButtonUtilService.hide();\n			rpUserSortButtonUtilService.hide();\n\n\n			var value = $window.innerWidth;\n			\n			if (value > 1550) {\n				// $log.log(\"Changing to 3 columns, window size: \" + value);\n				$scope.columns = [1, 2, 3];\n			} else if (value > 970) {\n				// $log.log(\"Changing to 2 columns, window size: \" + value);\n				$scope.columns = [1, 2];\n			} else {\n				// $log.log(\"Changing to 1 column, window size: \" + value);\n				$scope.columns = [1];\n			}\n\n			var sub = $scope.subreddit = $routeParams.sub;\n			// console.log('[rpPostsCtrl] sub: ' + sub);\n\n			$scope.sort = $routeParams.sort ? $routeParams.sort : 'hot';\n			// console.log('[rpPostsCtrl] $scope.sort: ' + $scope.sort);\n			// console.log('[rpPostsCtrl] $scope.sort: ' + $scope.sort);\n			\n			var t = $routeParams.t ? $routeParams.t : '';\n			var loadingMore = false;\n			$scope.showSub = true;\n			$scope.havePosts = false;\n\n			rpPostsTabsUtilService.setTab($scope.sort);\n\n			if (sub && sub != 'all' && sub != 'random') {\n				$scope.showSub = false;\n				rpTitleChangeService.prepTitleChange('r/' + sub);\n				rpSubscribeButtonUtilService.show();\n				rpSubredditsUtilService.setSubreddit(sub);\n			}\n			else {\n				rpSubscribeButtonUtilService.hide();\n				$scope.showSub = true;\n				rpTitleChangeService.prepTitleChange('reddipaper: the material frontpage of the internet');\n			}\n\n			if (sub)\n				rpSubredditService.prepSubredditChange(sub);\n\n			/*\n				Manage setting to open comments in a dialog or window.\n			 */\n			$scope.commentsDialog = rpSettingsUtilService.settings.commentsDialog;\n\n			var deregisterSettingsChanged = $rootScope.$on('settings_changed', function(data) {\n				$scope.commentsDialog = rpSettingsUtilService.settings.commentsDialog;\n			});\n\n			/*\n				Loading Posts\n			 */\n			$rootScope.$emit('progressLoading');\n\n			rpPostsUtilService(sub, $scope.sort, '', t, function(data) {\n\n				$rootScope.$emit('progressComplete');\n				$scope.posts = data;\n				$scope.havePosts = true;\n			\n			});\n\n\n			/*\n				Load more posts using the 'after' parameter.\n			 */\n			$scope.morePosts = function() {\n				if ($scope.posts && $scope.posts.length > 0){\n					var lastPostName = $scope.posts[$scope.posts.length-1].data.name;\n					if(lastPostName && !loadingMore){\n						loadingMore = true;\n						$rootScope.$emit('progressLoading');\n\n						rpPostsUtilService(sub, $scope.sort, lastPostName, t, function(data) {\n							Array.prototype.push.apply($scope.posts, data);\n							loadingMore = false;\n							$rootScope.$emit('progressComplete');\n						});\n\n					}\n				}\n			};\n\n			var deregisterTClick = $rootScope.$on('t_click', function(e, time){\n				$scope.posts = {};\n				\n				t = time;\n\n				if (sub) {\n					$location.path('/r/' + sub + '/' + $scope.sort, false).search('t=' + t).replace();\n				} else {\n					$location.path('/' + $scope.sort, false).search('t=' + t).replace();\n				}\n\n				$rootScope.$emit('progressLoading');\n				$scope.havePosts = false;\n\n				rpPostsUtilService(sub, $scope.sort, '', t, function(data) {\n					$scope.posts = data;\n					$scope.havePosts = true;\n					$rootScope.$emit('progressComplete');\n				});\n\n			});\n\n			var deregisterPostsTabClick = $rootScope.$on('posts_tab_click', function(e, tab){\n				console.log('[rpPostsCtrl] posts_tab_click, $scope.subreddit: ' + $scope.subreddit);\n				$scope.posts = {};\n\n				$scope.sort = tab;\n\n				if (sub) {\n					$location.path('/r/' + sub + '/' + $scope.sort, false).search('').replace();\n				} else {\n					$location.path('/' + $scope.sort, false).search('');\n				}\n\n				$scope.havePosts = false;\n				$rootScope.$emit('progressLoading');\n\n				rpPostsUtilService(sub, $scope.sort, '', t, function(data) {\n					$scope.posts = data;\n					$scope.havePosts = true;\n					$rootScope.$emit('progressComplete');\n				});\n\n			});\n\n			$scope.savePost = function(post) {\n				\n				rpSaveUtilService(post);\n\n			};\n\n			$scope.upvotePost = function(post) {\n\n				rpUpvoteUtilService(post);\n\n			};\n			\n			$scope.downvotePost = function(post) {\n				\n				rpDownvoteUtilService(post);\n\n			};\n\n			$scope.showCommentsUser = function(e, post) {\n				\n				var id = post.data.link_id || post.data.name;\n				\n				console.log('[rpPostsCtrl] showCommentsUser: e.ctrlKey:' + e.ctrlKey);\n\n				rpByIdUtilService(id, function(data) {\n				\n					if ($scope.commentsDialog && !e.ctrlKey) {\n						$mdDialog.show({\n							controller: 'rpCommentsDialogCtrl',\n							templateUrl: 'partials/rpCommentsDialog',\n							targetEvent: e,\n							// parent: angular.element('#rp-content'),\n							locals: {\n								post: data\n							},\n							clickOutsideToClose: true,\n							escapeToClose: false\n\n						});\n					\n					} else {\n						rpLocationUtilService(e, '/r/' + data.data.subreddit + '/comments/' + data.data.id, '', true, false);\n					}\n				});\n\n			};\n\n			$scope.showComments = function(e, post) {\n\n				console.log('[rpPostsCtrl] showCommentsUser: e.ctrlKey:' + e.ctrlKey);\n\n				if ($scope.commentsDialog && !e.ctrlKey) {\n					$mdDialog.show({\n						controller: 'rpCommentsDialogCtrl',\n						templateUrl: 'partials/rpCommentsDialog',\n						targetEvent: e,\n						// parent: angular.element('#rp-content'),\n						locals: {\n							post: post\n						},\n						clickOutsideToClose: true,\n						escapeToClose: false\n\n					});\n				\n				} else {\n					rpLocationUtilService(e, '/r/' + post.data.subreddit + '/comments/' + post.data.id, '', true, false);\n				}\n\n			};\n\n			$scope.showContext = function(e, post) {\n				console.log('[rpPostsCtrl] showContext()');\n\n				rpLocationUtilService(e, '/r/' + post.data.subreddit + \n					'/comments/' + \n					$filter('rp_name_to_id36')(post.data.link_id) + \n					'/' + post.data.id + '/', 'context=8', true, false);\n			};\n\n			$scope.triggerTabChangeEvent = function() {\n				rpPostsTabsUtilService.setTab('new');\n				// $rootScope.$emit('posts_tab_change');\n			};\n\n			// $scope.openAuthor = function(e, post) {\n			// 	rpLocationUtilService(e, '/u/' + post.data.author, '', true, false);\n			// };\n\n\n			$scope.sharePost = function(e, post) {\n				console.log('[rpPostCtrl] sharePost(), post.data.url: ' + post.data.url);\n\n				post.bottomSheet = true;\n\n				var shareBottomSheet = $mdBottomSheet.show({\n					templateUrl: 'partials/rpShareBottomSheet',\n					controller: 'rpSharePostCtrl',\n					targetEvent: e,\n					parent: '.rp-view',\n					disbaleParentScroll: true,\n					locals: {\n						post: post\n					}\n				}).then(function() {\n					console.log('[rpPostCtrl] bottomSheet Resolved: remove rp-bottom-sheet class');\n					post.bottomSheet = false;\n				}).catch(function() {\n					console.log('[rpPostCtrl] bottomSheet Rejected: remove rp-bottom-sheet class');\n					post.bottomSheet = false;\n				});\n\n			};\n\n			$scope.$on('$destroy', function() {\n				console.log('[rpPostsCtrl] $destroy, $scope.subreddit: ' + $scope.subreddit);\n				deregisterSettingsChanged();\n				deregisterPostsTabClick();\n				deregisterTClick();\n			});\n\n		}\n	]\n);\n\nrpPostControllers.controller('rpSharePostCtrl', ['$scope', '$window', '$mdBottomSheet', \n	'$mdDialog', 'rpLocationUtilService', 'rpSettingsUtilService', 'post',\n	function($scope, $window, $mdBottomSheet, $mdDialog, rpLocationUtilService,\n	 rpSettingsUtilService, post) {\n		console.log('[rpSharePostCtrl] shareLink: ' + post.data.url);\n		\n		var shareLink = post ? \"http://www.reddipaper.com\" + post.data.permalink : 'http://www.reddipaper.com';\n		var shareTitle = post ? post.data.title : 'reddipaper.com';\n		var shareThumb = post ? post.data.thumbnail : 'http://www.reddipaper.com/logo';\n\n		$scope.items = [\n			{name: 'reddit user', icon: '/icons/reddit-square.svg'},\n			{name: 'email', icon: '/icons/ic_email_black_48px.svg'},\n			{name: 'facebook', icon: '/icons/facebook-box.svg'},\n			{name: 'twitter', icon: '/icons/twitter-box.svg'},\n		];\n\n		$scope.listItemClicked = function(e, $index) {\n			\n			console.log('[rpSharePostCtrl] listItemClicked, $index: ' + $index);\n\n			$mdBottomSheet.hide();\n\n			switch($index) {\n				case 0: \n					// var composeDialog = rpSettingsUtilService.settings.composeDialog;\n					// console.log('[rpSharePostCtrl] reddit, composeDialog: ' + composeDialog);\n\n					// if (composeDialog) {\n\n						$mdDialog.show({\n							controller: 'rpMessageComposeDialogCtrl',\n							templateUrl: 'partials/rpMessageComposeDialog',\n							clickOutsideToClose: false,\n							escapeToClose: false,\n							locals: {\n								shareLink: shareLink,\n								shareTitle: shareTitle\n							}\n\n						});\n					\n					// } else {\n					// 	rpLocationUtilService(e, '/message/compose', '', true, false);\n					// }\n					// \n					break;\n				\n				case 3:\n					console.log('[rpSharePostCtrl'])\n					break;\n\n				case 2:\n					console.log('[rpSharePostCtrl] facebook');\n\n					$window.open('https://www.facebook.com/dialog/feed?app_id=868953203169873&name=' + \n						encodeURIComponent(shareTitle) +'&link=' + encodeURIComponent(shareLink) + \n						'&redirect_uri=' + encodeURIComponent('http://pacific-river-1673.herokuapp.com') +\n						'&picture=' + shareThumb +'&display=popup', 'Share with facebook', \"height=500,width=500\");\n\n					break;\n\n				case 3:\n					console.log('[rpSharePostCtrl] twitter');\n					$window.open('https://twitter.com/intent/tweet?text='+ encodeURIComponent(shareTitle) + \n						', ' + encodeURIComponent(shareLink) + \n						' via @reddipaper', 'Share with twitter', \"height=500,width=500\");\n					break;\n\n				default:\n			}\n\n		};\n	}\n]);\n\nrpPostControllers.controller('rpPostReplyCtrl', ['$scope', 'rpPostCommentUtilService',\n	function($scope, rpPostCommentUtilService) {\n\n		$scope.postReply = function(name, comment) {\n\n			rpPostCommentUtilService(name, comment, function(data) {\n\n				$scope.reply = \"\";\n				$scope.rpPostReplyForm.$setUntouched();\n\n			});\n\n		};\n	}\n]);\n\nrpPostControllers.controller('rpPostsTabsCtrl', ['$scope', '$rootScope', 'rpPostsTabsUtilService',\n 'rpPostFilterButtonUtilService',\n	function($scope, $rootScope, rpPostsTabsUtilService, rpPostFilterButtonUtilService) {\n\n		selectTab();\n		\n		/*\n			A Hack to stop the tab bar reloading content and switching tabs when it loads the first time.\n		 */ \n		var firstLoadOver = false;\n\n		$scope.tabClick = function(tab) {\n			\n			console.log('[rpPostsTabsCtrl] tabClick, tab: ' + tab);\n\n			if (firstLoadOver) {\n				// console.log('[rpPostsTabsCtrl] tabClick(), tab: ' + tab);\n				$rootScope.$emit('posts_tab_click', tab);\n				rpPostsTabsUtilService.setTab(tab);\n				\n			} else {\n				firstLoadOver = true;\n			}\n\n		};\n\n		var deregisterPostsTabChange = $rootScope.$on('posts_tab_change', function(e, tab){\n			console.log('[rpPostsTabsCtrl] posts_tab_change');\n			selectTab();\n		});\n\n		/*\n			Triggers tabClick when the tab changes.\n		 */\n\n		function selectTab() {\n			var tab = rpPostsTabsUtilService.tab;\n			console.log('[rpPostsTabsCtrl] selectTab() tab: ' + tab);\n\n			if (tab === 'top' || tab === 'controversial') {\n				rpPostFilterButtonUtilService.show();\n			} else {\n				rpPostFilterButtonUtilService.hide();\n			}\n\n			switch(tab) {\n				case 'hot':\n					$scope.selectedIndex = 0;\n					break;\n				case 'new':\n					$scope.selectedIndex = 1;\n					break;\n				case 'rising':\n					$scope.selectedIndex = 2;\n					break;\n				case 'controversial':\n					$scope.selectedIndex = 3;\n					break;\n				case 'top':\n					$scope.selectedIndex = 4;\n					break;\n				case 'gilded':\n					$scope.selectedIndex = 5;\n					break;\n				default:\n					$scope.selectedIndex = 0;\n					break;\n			}			\n		}\n\n		$scope.$on('$destroy', function() {\n			deregisterPostsTabChange();\n		});\n	}\n]);\n\nrpPostControllers.controller('rpPostsTimeFilterCtrl', ['$scope', '$rootScope', \n	function($scope, $rootScope) {\n		$scope.selectTime = function(value){\n			$rootScope.$emit('t_click', value);\n		};\n	}\n]);\n\nrpPostControllers.controller('rpPostFabCtrl', ['$scope', '$mdDialog', 'rpAuthUtilService', 'rpToastUtilService',\n	function($scope, $mdDialog, rpAuthUtilService, rpToastUtilService) {\n\n		$scope.fabState = 'closed';\n\n		// console.log('[rpPostFabCtrl] $scope.subreddit: ' + $scope.subreddit);\n\n		$scope.newLink = function(e) {\n			if (rpAuthUtilService.isAuthenticated) {\n\n				$mdDialog.show({\n					controller: 'rpPostSubmitDialogCtrl',\n					templateUrl: 'partials/rpSubmitLinkDialog',\n					targetEvent: e,\n					locals: {\n						subreddit: $scope.subreddit\n					},\n					clickOutsideToClose: true,\n					escapeToClose: false\n\n				});\n\n				$scope.fabState = 'closed';\n			\n			} else {\n				$scope.fabState = 'closed';\n				rpToastUtilService(\"You've got to log in to submit a link\");\n			}\n		};\n\n		$scope.newText = function(e) {\n\n			if (rpAuthUtilService.isAuthenticated) {\n				$mdDialog.show({\n					controller: 'rpPostSubmitDialogCtrl',\n					templateUrl: 'partials/rpSubmitTextDialog',\n					targetEvent: e,\n					locals: {\n						subreddit: $scope.subreddit\n					},\n					clickOutsideToClose: true,\n					escapeToClose: false\n\n				});\n\n				$scope.fabState = 'closed';\n\n			} else {\n				$scope.fabState = 'closed';\n				rpToastUtilService(\"You've got to log in to submit a self post\");\n			}\n		};\n\n	}\n]);\n\nrpPostControllers.controller('rpPostSubmitDialogCtrl', ['$scope', '$location', '$mdDialog', 'subreddit',\n	function($scope, $location, $mdDialog, subreddit) {\n		\n		if (!subreddit || subreddit !== 'all') {\n			$scope.subreddit = subreddit;\n		}\n\n		//Close the dialog if user navigates to a new page.\n		var deregisterLocationChangeSuccess = $scope.$on('$locationChangeSuccess', function() {\n			$mdDialog.hide();\n		});\n\n		$scope.$on('$destroy', function() {\n			deregisterLocationChangeSuccess();\n		});\n\n	}\n]);\n\nrpPostControllers.controller('rpPostSubmitFormCtrl', ['$scope', '$rootScope', '$interval', '$mdDialog', \n	'rpSubmitUtilService', 'rpSubredditsUtilService',\n	function ($scope, $rootScope, $interval, $mdDialog, rpSubmitUtilService, rpSubredditsUtilService) {\n\n		// console.log('[rpPostSubmitFormCtrl] $scope.subreddit: ' + $scope.subreddit);\n		var resetSudreddit = false;\n\n		if (!$scope.subreddit)\n			resetSudreddit = true;\n\n		clearForm();\n		var searchText;\n		\n		rpSubredditsUtilService(function(data) {\n			$scope.subs = data;\n		});\n\n		$scope.subSearch = function(subSearchText) {\n			searchText = subSearchText;\n			var results = subSearchText ? $scope.subs.filter(createFilterFor(subSearchText)) : [];\n			return results;\n		};\n\n		function createFilterFor(query) {\n			var lowercaseQuery = angular.lowercase(query);\n			return function filterFn(sub) {\n				return (sub.data.display_name.indexOf(lowercaseQuery) === 0);\n			};\n		}\n\n		function clearForm() {\n			$scope.title = \"\";\n			$scope.url = \"\";\n			$scope.text = \"\";\n			$scope.sendreplies = true;\n			$scope.iden = \"\";\n			$scope.cpatcha = \"\";\n			if (resetSudreddit)\n				$scope.subreddit = \"\";\n\n			$scope.showSubmit = true;\n			$scope.showRatelimit = false;\n			$scope.showAnother = false;\n			$scope.showRepost = false;\n\n			$scope.showMessage = false;\n			$scope.showButtons = true;\n\n\n			if ($scope.rpSubmitNewLinkForm)\n				$scope.rpSubmitNewLinkForm.$setUntouched();	\n		}\n\n		$scope.resetForm = function() {\n			clearForm();\n			$rootScope.$emit('reset_captcha');\n		};\n\n		$scope.submitLink = function() {\n			$scope.showProgress = true;\n			$scope.showButtons = false;\n			$scope.showFeedback = false;\n\n			var kind = $scope.url ? 'link' : 'self';\n\n			// console.log('[rpPostSubmitFormCtrl] submitLink(), $scope.subreddit: ' + $scope.subreddit);\n			// console.log('[rpPostSubmitFormCtrl] submitLink(), searchText: ' + searchText);\n\n			if (!$scope.subreddit) {\n				$scope.subreddit = $scope.mdSelectedItem ? $scope.mdSelectedItem.data.display_name : searchText;\n			}\n\n			rpSubmitUtilService(kind, $scope.resubmit, $scope.sendreplies, $scope.subreddit, \n				$scope.text, $scope.title, $scope.url, $scope.iden, $scope.captcha, function(data) {\n\n				// console.log('[rpPostSubmitFormCtrl] submitLink(), $scope.subreddit: ' + $scope.subreddit);\n\n				$scope.showProgress = false;\n\n				if (data.json.errors.length > 0) {\n\n\n					// console.log('[rpPostSubmitFormCtrl] error in submission, data.json.errors[0][0]: ' + data.json.errors[0][0]);\n					// console.log('[rpPostSubmitFormCtrl] error in submission, data.json.errors[0][1]: ' + data.json.errors[0][1]);\n\n					//ratelimit error. (Still untested)\n					if (data.json.errors[0][0] === 'RATELIMIT') {\n						// console.log('[rpPostSubmitFormCtrl] ratelimit error. data: ' + JSON.stringify(data));\n\n						$scope.showSubmit = false;\n						$scope.showRatelimit = true;\n\n						var duration = data.json.ratelimit;\n\n						var countdown = $interval(function(){\n\n							var minutes = parseInt(duration / 60, 10);\n							var seconds = parseInt(duration % 60, 10);\n\n							minutes = minutes < 10 ? \"0\" + minutes : minutes;\n							seconds = seconds < 10 ? \"0\" + seconds : seconds;\n\n							$scope.rateLimitTimer = minutes + \":\" + seconds;\n\n							if (--duration < 0) {\n\n								$rootScope.$emit('reset_captcha');\n\n								$scope.showRatelimit = false;\n								$scope.showFeedbackAlert = false;\n								$scope.feedbackMessage = \"Alright, you should be able to post now, give it another go.\";\n								$scope.showSubmit = true;\n								$interval.cancel(countdown);\n							}\n\n\n						}, 1000);						\n					\n						$scope.feedbackMessage = data.json.errors[0][1];\n\n						$scope.showFeedbackAlert = true;\n						$scope.showFeedbackLink = false;\n						$scope.showFeedback = true;\n\n					\n						$scope.showButtons = true;\n					}\n\n					else if (data.json.errors[0][0] === 'QUOTA_FILLED') {\n						// console.log('[rpPostSubmitFormCtrl] QUOTA_FILLED ERROR');\n\n						$scope.feedbackMessage = data.json.errors[0][1];\n\n						$scope.showFeedbackAlert = true;\n						$scope.showFeedbackLink = false;\n						$scope.showFeedback = true;\n						$scope.showSubmit = false;\n						$scope.showButtons = true;\n					}\n\n					else if (data.json.errors[0][0] === 'BAD_CAPTCHA') {\n						// console.log('[rpPostSubmitFormCtrl] bad captcha error.');\n						$rootScope.$emit('reset_captcha');					\n						\n						$scope.feedbackMessage = \"You entered the CAPTCHA incorrectly. Please try again.\";\n					\n						$scope.showFeedbackAlert = true;\n						$scope.showFeedbackLink = false;\n						$scope.showFeedback = true;\n					\n						$scope.showButtons = true;\n					}\n					\n					//repost error ----not sure of this error name----\n					else if (data.json.errors[0][0] === 'ALREADY_SUB') { \n						// console.log('[rpPostSubmitFormCtrl] repost error: ' + JSON.stringify(data));\n						$rootScope.$emit('reset_captcha');\n\n						// $scope.feedbackLink = data;\n						// $scope.feedbackLinkName = \"The link\";\n						// $scope.feedbackMessage = \"you tried to submit has been submitted to this subreddit before\";\n\n						$scope.resubmit = true;\n					\n						$scope.feedbackMessage = data.json.errors[0][1];\n						$scope.showFeedbackAlert = true;\n						$scope.showFeedbackLink = false;\n						$scope.showFeedback = true;\n					\n						$scope.showSubmit = false;\n						$scope.showRepost = true;\n\n						$scope.showButtons = true;\n\n					} \n\n					/*\n						Catches unspecififed errors or ones that do not require special handling.\n						Catches, SUBREDDIT_ERROR. \n					 */\n\n					else { \n						// console.log('[rpPostSubmitFormCtrl] error catchall: ' + JSON.stringify(data));\n						$rootScope.$emit('reset_captcha');\n\n						$scope.feedbackMessage = data.json.errors[0][1];\n					\n						$scope.showFeedbackAlert = true;\n						$scope.showFeedbackLink = false;\n						$scope.showFeedback = true;\n					\n						$scope.showSubmit = true;\n						$scope.showButtons = true;\n					} \n\n				} else if (!data.json.data.url) {\n					// console.log('[rpPostSubmitFormCtrl] garbage url error occurred.');\n\n					$rootScope.$emit('reset_captcha');\n\n					$scope.feedbackMessage = 'An error occurred trying to post your link.\\nPlease check the url, wait a few minutes and try again.';\n					$scope.showFeedbackLink = false;\n					$scope.showFeedbackAlert = true;\n					$scope.showFeedback = true;\n\n					$scope.showButtons = true;\n				\n				} else { //Successful Post :)\n					// console.log('[rpPostSubmitFormCtrl] successful submission, data: ' + JSON.stringify(data));\n\n					var feedbackLinkRe = /^https?:\\/\\/www\\.reddit\\.com\\/r\\/([\\w]+)\\/comments\\/([\\w]+)\\/(?:[\\w]+)\\//i;\n					var groups = feedbackLinkRe.exec(data.json.data.url);\n\n					if (groups) {\n						$scope.feedbackLink = '/r/' + groups[1] + '/comments/' + groups[2];\n					}\n\n					$scope.feedbackLinkName = \"Your post\";\n					$scope.feedbackMessage = \"was submitted successfully.\";\n					\n					$scope.showFeedbackAlert = false;\n					$scope.showFeedbackLink = true;\n					$scope.showFeedback = true;\n\n					$scope.showRepost = false;\n					$scope.showSubmit = false;\n					$scope.showAnother = true;\n					$scope.showButtons = true;\n					\n				}\n\n			});\n	\n		};\n\n		$scope.closeDialog = function() {\n			$mdDialog.hide();\n		};\n\n		function startRateLimitTimer(duration) {\n\n			$scope.rateLimitSubmitDisabled = true;\n			console.log('[rpPostSubmitFormCtrl] duration: ' + duration);\n\n		}\n\n\n	}\n\n]);",
			"file": "public/javascript/ng-app/rpPostControllers.js",
			"file_size": 21818,
			"file_write_time": 130823796651988110,
			"settings":
			{
				"buffer_size": 21881,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/cavemanninja/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
			"settings":
			{
				"buffer_size": 466,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 249.0,
		"last_filter": "pretty",
		"selected_items":
		[
			[
				"pretty",
				"HTMLPrettify"
			],
			[
				"ppret",
				"HTMLPrettify: Set Prettify Preferences"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"prett",
				"HTMLPrettify"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"mark",
				"SublimeLinter: Choose Mark Style"
			],
			[
				"view",
				"View: Toggle Menu"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"isntall",
				"Package Control: Install Package"
			],
			[
				"rem",
				"Package Control: Remove Package"
			],
			[
				"git ",
				"Git: Commit"
			],
			[
				"git push ",
				"Git: Push Current Branch"
			],
			[
				"git commit",
				"Git: Commit"
			],
			[
				"git add",
				"Git: Add..."
			],
			[
				"packa",
				"Package Control: List Packages"
			],
			[
				"for",
				"Format Code"
			],
			[
				"form",
				"Format Code"
			],
			[
				"Package Control: instal",
				"Package Control: Install Package"
			]
		],
		"width": 475.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/cavemanninja/workspace/redditplus",
		"/home/cavemanninja/workspace/redditplus/public",
		"/home/cavemanninja/workspace/redditplus/reddit",
		"/home/cavemanninja/workspace/redditplus/twitter",
		"/home/cavemanninja/workspace/redditplus/views",
		"/home/cavemanninja/workspace/redditplus/views/partials"
	],
	"file_history":
	[
		"/home/cavemanninja/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/cavemanninja/workspace/redditplus/package.json",
		"/home/cavemanninja/workspace/redditplus/views/partials/rpPost.jade",
		"/home/cavemanninja/workspace/redditplus/views/partials/rpPosts.jade",
		"/home/cavemanninja/workspace/redditplus/views/partials/rpShareBottomSheet.jade",
		"/home/cavemanninja/workspace/redditplus/public/stylesheets/less/rp-bottom-sheet.less",
		"/home/cavemanninja/workspace/redditplus/views/partials/rpMediaDefault.jade",
		"/home/cavemanninja/workspace/redditplus/views/partials/rpMedia.jade",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/rpResourceServices.js",
		"/home/cavemanninja/workspace/redditplus/public/stylesheets/less/rp-post.less",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/rpUtilServices.js",
		"/home/cavemanninja/workspace/redditplus/views/partials/rpMessageCompose.jade",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/rpPostControllers.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/rpMessageControllers.js",
		"/home/cavemanninja/workspace/redditplus/views/partials/closeWindow.jade",
		"/home/cavemanninja/workspace/redditplus/views/layout.jade",
		"/home/cavemanninja/workspace/redditplus/views/facebook.html",
		"/home/cavemanninja/workspace/redditplus/app.js",
		"/home/cavemanninja/workspace/redditplus/views/partials/closeWindow.html",
		"/home/cavemanninja/workspace/redditplus/views/head.jade",
		"/home/cavemanninja/workspace/redditplus/views/index.jade",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/rpControllers.js",
		"/home/cavemanninja/workspace/redditplus/public/stylesheets/less/style.less",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/rpCommentsControllers.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/rpUserControllers.js",
		"/home/cavemanninja/workspace/redditplus/views/partials/rpComment.jade",
		"/home/cavemanninja/workspace/redditplus/views/partials/rpComments.jade",
		"/home/cavemanninja/workspace/redditplus/reddit/redditAuthRouter.js",
		"/home/cavemanninja/workspace/redditplus/reddit/redditAuth.js",
		"/home/cavemanninja/workspace/redditplus/reddit/redditApiRouter.js",
		"/home/cavemanninja/workspace/redditplus/views/partials/rpUser.jade",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/rpApp.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/rpServices.js",
		"/home/cavemanninja/workspace/redditplus/views/partials/rpMessage.jade",
		"/home/cavemanninja/workspace/redditplus/views/partials/rpUserComment.jade",
		"/home/cavemanninja/workspace/redditplus/reddit/redditApiHandler.js",
		"/home/cavemanninja/workspace/redditplus/views/partials/rpUserLink.jade",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/rpFilters.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/rpSettingsControllers.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/rpProgressControllers.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/rpDirectives.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/postColumns.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/rpCaptchaControllers.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/actionButtonSelectHelper.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/progress.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/twitterWidget.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/hideEmbeds.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/rpCommentControllers.js",
		"/home/cavemanninja/workspace/redditplus/views/partials/rpUserPost.jade",
		"/home/cavemanninja/workspace/redditplus/public/stylesheets/less/rp-toolbar.less",
		"/home/cavemanninja/workspace/redditplus/views/partials/rpSubreddits.jade",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/rpMediaControllers.js",
		"/home/cavemanninja/workspace/redditplus/views/partials/rpPostsGilded.jade",
		"/home/cavemanninja/workspace/redditplus/views/partials/rpMediaImgur.jade",
		"/home/cavemanninja/workspace/redditplus/angular",
		"/home/cavemanninja/.config/sublime-text-3/Packages/HTML-CSS-JS Prettify/.jsbeautifyrc",
		"/home/cavemanninja/workspace/redditplus/bower.json",
		"/home/cavemanninja/workspace/redditplus/twitter/config.json",
		"/home/cavemanninja/workspace/redditplus/twitter/twitterApiHandler.js",
		"/home/cavemanninja/workspace/redditplus/twitter/twitterApiRouter.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/hidePostsFab.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/hidePostsFab.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/rpMediaDirectives.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/timeFilter.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/app.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/controllers.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/filters.js",
		"/home/cavemanninja/workspace/redditplus/public/javascript/ng-app/services.js",
		"/home/cavemanninja/workspace/redditplus/views/partials/rpToast.jade",
		"/home/cavemanninja/workspace/redditplus/public/javascript/gfycat.js",
		"/home/cavemanninja/.config/sublime-text-3/Packages/User/SublimeLinter.sublime-settings",
		"/C/Users/Jalal/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/Jalal/AppData/Roaming/Sublime Text 3/Packages/SublimeCodeIntel/SublimeCodeIntel.sublime-settings",
		"/C/Users/Jalal/AppData/Roaming/Sublime Text 3/Packages/User/SublimeCodeIntel.sublime-settings",
		"/C/Users/Jalal/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/ng-app/postsController.js",
		"/C/Users/Jalal/workspace/redditplus/bower.json",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/rpCommentsImageResize.js",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/ng-app/rpCommentsImageResize.js",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/postColumns.js",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/ng-app/directives.js",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/ng-app/services.js",
		"/C/Users/Jalal/workspace/redditplus/reddit/redditApiHandler.js",
		"/C/Users/Jalal/workspace/redditplus/app.js",
		"/C/Users/Jalal/workspace/redditplus/routes/index.js",
		"/C/Users/Jalal/workspace/redditplus/reddit/redditAuthRouter.js",
		"/C/Users/Jalal/workspace/redditplus/reddit/redditAuth.js",
		"/C/Users/Jalal/workspace/redditplus/reddit/redditServer.js",
		"/C/Users/Jalal/workspace/redditplus/reddit/redditApiRouter.js",
		"/C/Users/Jalal/workspace/redditplus/node_modules/snoocore/Snoocore.js",
		"/C/Users/Jalal/workspace/redditplus/node_modules/snoocore/oauth.js",
		"/C/Users/Jalal/workspace/redditplus/reddit/config.json",
		"/C/Users/Jalal/workspace/snoocore-examples-master/snoocore-examples-master/node/oauth-explicit-permanent-1.js",
		"/C/Users/Jalal/workspace/snoocore-examples-master/snoocore-examples-master/node/oauth-explicit-permanent-2.js",
		"/C/Users/Jalal/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/C/Users/Jalal/workspace/redditplus/models/redditUser.js",
		"/C/Users/Jalal/workspace/redditplus/models/redditApp.js",
		"/C/Users/Jalal/workspace/heroku/secure-ravine-8788/server.js",
		"/C/Users/Jalal/workspace/redditplus/models/redditAccounts.js",
		"/C/Users/Jalal/workspace/redditplus/views/index.jade",
		"/C/Users/Jalal/workspace/redditplus/views/head.jade",
		"/C/Users/Jalal/workspace/redditplus/public/stylesheets/less/style.less",
		"/C/Users/Jalal/workspace/redditplus/views/partials/rpPost.jade",
		"/C/Users/Jalal/workspace/redditplus/views/partials/rpToast.jade",
		"/C/Users/Jalal/workspace/redditplus/views/partials/subredditPosts.jade",
		"/C/Users/Jalal/workspace/redditplus/public/stylesheets/css/scroll.css",
		"/C/Users/Jalal/workspace/redditplus/public/images/icons/upvote.svg",
		"/C/Users/Jalal/workspace/redditplus/bower_components/core-icons/core-icons.html",
		"/C/Users/Jalal/workspace/redditplus/bower_components/core-icons/social-icons.html",
		"/C/Users/Jalal/workspace/redditplus/public/images/icons/reddit-icons.html",
		"/C/Users/Jalal/workspace/redditplus/bower_components/core-icons/maps-icons.html",
		"/C/Users/Jalal/workspace/redditplus/bower_components/core-icons/demo.html",
		"/C/Users/Jalal/workspace/redditplus/views/partials/rpMedia.jade",
		"/C/Users/Jalal/workspace/redditplus/public/images/icons/ic_favorite_24px.svg",
		"/C/Users/Jalal/workspace/redditplus/public/images/icons/arrow-down1.svg",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/controllers.js",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/directives.js",
		"/C/Users/Jalal/workspace/redditplus/views/partials/sidenavSubreddits.jade",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/app.js",
		"/C/Users/Jalal/workspace/redditplus/views/partials/rpImgurAlbum.jade",
		"/C/Users/Jalal/workspace/redditplus/public/javascript/filters.js",
		"/C/Users/Jalal/workspace/redditplus/package.json",
		"/C/Users/Jalal/workspace/redditplus/routes/config.json",
		"/C/Users/Jalal/workspace/redditplus/routes/api.js",
		"/C/Users/Jalal/AppData/Roaming/Sublime Text 3/Packages/User/SublimeLinter.sublime-settings",
		"/C/Users/Jalal/workspace/redditplus/reddit/redditApi.js",
		"/C/Users/Jalal/workspace/redditplus/routes/auth.js",
		"/C/Users/Jalal/workspace/redditplus/node_modules/mongoose/package.json"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"default",
			"title",
			" '$",
			"rpLocation",
			"locals",
			";\n",
			"\n					",
			"e.",
			"ctrl",
			"rpIdentityUtilService",
			"location",
			"user",
			"48",
			"		$scope.showUserComments = function(e, post) {\n				\n				var id = post.data.link_id || post.data.name;\n				rpByIdUtilService(id, function(data) {\n				\n					if ($scope.commentsDialog) {\n						$mdDialog.show({\n							controller: 'rpCommentsDialogCtrl',\n							templateUrl: 'partials/rpCommentsDialog',\n							targetEvent: e,\n							// parent: angular.element('#rp-content'),\n							locals: {\n								post: data\n							},\n							clickOutsideToClose: true,\n							escapeToClose: false\n\n						});\n					\n					} else {\n						rpLocationUtilService(e, '/r/' + data.data.subreddit + '/comments/' + data.data.id, '', true, false);\n					}\n				});\n\n			};\n",
			"$scope.$on",
			"$scope.",
			"$scope.$on",
			"$rootscope.$on",
			"comments_sort",
			"loaded",
			"ic_av_timer_black_48px",
			"tabClick(",
			"$location",
			"$location.path",
			"posts",
			"$location.path",
			"rpIdentityUtilService",
			"posts",
			"random",
			"$location.path",
			"$location",
			"location",
			"rpSubredditService",
			"rpSubscribeUtilService",
			"posts_subscribe_visibility",
			"rpPostsSubscribeUtilService",
			"aboutSubreddit",
			"subscribed",
			"log",
			"console.log('[progress",
			"rpSubredditsUtilService",
			"subscri",
			"posts_sub_visibility",
			"rpPostsSubUtil",
			"showSub",
			"console.log('[progress",
			"PostsSub",
			"Sub",
			"\n				",
			"showPostFilter",
			"//$rootScope.$emit('progressComplete');",
			"  ",
			"		\n",
			"console",
			"  ",
			"$rootScope.$emit('progressComplete",
			"//$rootScope.$emit('progressComplete",
			"100",
			"//$rootScope.$emit('progressLoading",
			"$rootScope.$emit('progress",
			"$rootScope.$emit('progressLoading');",
			"$emit('progress')",
			"rpPostsCtrl",
			"posts_tab_click",
			"$rootScope.$emit('posts_tab_click', tab);",
			"tabClick",
			"path",
			"$location",
			"rpComments",
			"composeWindow",
			"sidebar",
			"= 'undefined",
			".get",
			"get",
			"/api",
			"ng-class",
			"hideable",
			"gilded",
			"tabClick",
			"posts_tab_click",
			"tabclick",
			"location",
			"$scope.sub",
			"handleSubredditChange",
			"bottom",
			"iden",
			"showSubmit",
			"feedbackMessage",
			".';\n",
			"submitAction",
			"$scope.$parent",
			"captcha",
			"showProgress",
			";\n",
			"rpFilterButtonUtilService",
			"$scope.sort",
			", ",
			"filter",
			"redditPlusApp",
			"$scope.tab",
			"window",
			"rpMediadirectives",
			"rpDirectives",
			"unsafe",
			"trusted",
			"unescape_html",
			"unescape_embed",
			"clean",
			"load_rp_comment_media",
			"image_url_comment_media",
			"subreddit_url",
			"name_to_id36",
			"redditPlusFilters",
			"redditPlusDirectives",
			"voteService",
			"rpServices",
			"redditPlusServices",
			"redditPlusControllers",
			"toastCtrl",
			"progressCtrl",
			"progress",
			"redditPlusControllers",
			"rpMediaController",
			"redditPlusControllers",
			"getComments",
			"mediaType",
			"authenticated",
			"$rootScope.$emit"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"rpSubscribeButtonUtilService",
			"subscribe_visibility",
			"rpSubscribeUtilService",
			"posts_subscribe_visibility",
			"rpPostsSubscribeUtil",
			"//console.log('[progress",
			"$rootScope.$emit('progressComplete');",
			"",
			"\\t",
			"",
			"$rootScope.$emit('progressLoading",
			"//$rootScope.$emit('progress",
			"/rp",
			"/rpapi",
			"showButtons",
			"$parent",
			"showCaptchaProgress",
			"rpPostFilterButtonUtilService",
			"rpApp",
			"rpMediaDirectives",
			"rpFilters",
			"rpDirectives",
			"rpVoteService",
			"rpResourceServices",
			"rpServices",
			"rpControllers",
			"rpCommentsControllers",
			"rpPostControllers",
			"rpMediaControllers",
			"rpMediaController",
			"#Mod167",
			"#mOD167, #Mod168",
			"#mOD103, #Mod167",
			"Mod167",
			"force-no-margin",
			"",
			"LINK",
			"رابط",
			"صورة",
			"الادارة",
			"قاعة المؤتمرات",
			"غرفة الاجتماعات",
			"ورشات",
			"الطابق الأول",
			"الطابق الأرضي",
			"وحدة",
			"مبنى",
			"#Mod129, #Mod160",
			"data-content",
			"data-title",
			"data-titl1e",
			"data-title1",
			"campus-map-popover",
			"IMAGE_DESC",
			"'); ?>'>\">",
			"alt=''",
			"; ?>'>\">",
			"wh_1",
			"w4_1",
			"bdb_1_1st",
			"bdb_1_g",
			"w3_1_1st",
			"w3_1_g",
			"w1_1_1st",
			"w1_1_g",
			"lotc_1",
			"lotb_1",
			"lota_1",
			"\" data-html=\"true\" \n						data-content=\"<img class='building-img' alt=\"\" height='75' width='75' src='<?php echo JUri::base().$attribs->get('map_building8_1_image'); ?>'\">",
			"\" data-html=\"true\" data-content=\"<img class='building-img' alt=\"\" height='75' width='75' src='<?php echo JUri::base().$attribs->get('map_building8_1_image'); ?>'\">",
			"</div",
			"<div",
			"content",
			"_g",
			"bdb",
			"w3",
			"_1st",
			"w1",
			"_g'>\".$attribs->",
			"_g').\"</option>\";",
			"w3",
			"_1st",
			"_g') != \"\") {",
			"w1",
			"wh",
			"w4",
			"lotc",
			"lotb",
			"BDB",
			"bdb",
			"LOTC",
			"lotc",
			"lotb",
			"LOTB",
			"lotc",
			"i",
			"class3",
			"",
			"dashed",
			"bbic/joomla",
			"2"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "public/javascript/ng-app/rpPostControllers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21881,
						"regions":
						{
						},
						"selection":
						[
							[
								8900,
								8900
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4381.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/cavemanninja/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 466,
						"regions":
						{
						},
						"selection":
						[
							[
								255,
								255
							]
						],
						"settings":
						{
							"auto_complete": true,
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 139.0
	},
	"pinned_build_system": "",
	"project": "redditplus.sublime-project",
	"replace":
	{
		"height": 72.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"resources",
				"public/javascript/ng-app/rpResourceServices.js"
			],
			[
				"services",
				"public/javascript/ng-app/rpServices.js"
			],
			[
				"utilservi",
				"public/javascript/ng-app/rpUtilServices.js"
			],
			[
				"rpmessagectrl",
				"public/javascript/ng-app/rpMessageControllers.js"
			],
			[
				"rpcontro",
				"public/javascript/ng-app/rpControllers.js"
			],
			[
				"rpsettings",
				"public/javascript/ng-app/rpSettingsControllers.js"
			],
			[
				"proctr",
				"public/javascript/ng-app/rpProgressControllers.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 1000.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/workspace/redditplus/frontend.sublime-workspace"
			]
		],
		"width": 760.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 295.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 1
	}
}
